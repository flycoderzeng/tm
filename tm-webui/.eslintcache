[{"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\App.tsx":"1","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\menu\\MenuEdit.tsx":"2","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\CommonListPage.tsx":"3","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\index\\Index.tsx":"4","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\index\\Main.tsx":"5","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\index.tsx":"6","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\menu\\MenuList.tsx":"7","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\Login.tsx":"8","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\config\\axios.config.ts":"9","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\config\\route.config.ts":"10","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\user\\UserList.tsx":"11","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\user\\UserEdit.tsx":"12","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\project\\ProjectList.tsx":"13","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\project\\ProjectEdit.tsx":"14","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\right\\RightList.tsx":"15","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\right\\RightEdit.tsx":"16","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\role\\RoleEdit.tsx":"17","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\role\\RoleList.tsx":"18","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\role\\RoleRightSetting.tsx":"19","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\reportWebVitals.ts":"20","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\user\\UserRoleSetting.tsx":"21","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\project\\ProjectUserSetting.tsx":"22","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\CommonNodeTree.tsx":"23","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\CommonNodeManageLayout.tsx":"24","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\CommonNodeListPage.tsx":"25","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\shell\\ShellEdit.tsx":"26","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\globalvariable\\GlobalVariableEdit.tsx":"27","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\entities\\DataTypeEnumDescription.ts":"28","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\platformapi\\PlatformApiEdit.tsx":"29","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\entities\\DataTypeEnum.ts":"30","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\CommonTableShow.tsx":"31","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\config\\api.url.tsx":"32","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\httpapi\\HttpApiEdit.tsx":"33","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\httpapi\\FormEditor.tsx":"34","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\httpapi\\JsonDefineEditor.tsx":"35","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\httpapi\\HttpApiPreview.tsx":"36","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\logic\\IfControllerEditor.tsx":"37","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\logic\\WhileControllerEditor.tsx":"38","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\logic\\LoopControllerEditor.tsx":"39","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\entities\\ActionType.tsx":"40","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\AutoCaseEditor.tsx":"41","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\RootNodeEditor.tsx":"42","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\HttpEditor.tsx":"43","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\CommonNameComments.tsx":"44","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\AutoCaseVariableEditor.tsx":"45","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\KeyValueEditor.tsx":"46","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\ContentEditor.tsx":"47","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\PlatformApiEditor.tsx":"48","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\autoplan\\AutoPlanEdit.tsx":"49","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\cronjob\\CronJobList.tsx":"50","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\runenv\\RunEnvList.tsx":"51","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\runenv\\RunEnvEdit.tsx":"52","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\runenv\\RunEnvSelect.tsx":"53","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\autoplan\\PlanCaseEdit.tsx":"54","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\cronjob\\CronJobEdit.tsx":"55","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\components\\CommonRemoteSearchMultiSelect.tsx":"56","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\components\\CommonRemoteSearchSingleSelect.tsx":"57","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\config\\options.config.ts":"58","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\urlconfig\\UrlConfigList.tsx":"59","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\urlconfig\\UrlConfigEdit.tsx":"60","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\dbconfig\\DbConfigEdit.tsx":"61","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\dbconfig\\DbConfigList.tsx":"62","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\planresult\\PlanResultPage.tsx":"63","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\utils\\RandomUtils.ts":"64"},{"size":394,"mtime":1609163342817,"results":"65","hashOfConfig":"66"},{"size":6984,"mtime":1630731038726,"results":"67","hashOfConfig":"66"},{"size":6345,"mtime":1636257603790,"results":"68","hashOfConfig":"66"},{"size":4124,"mtime":1636809110284,"results":"69","hashOfConfig":"66"},{"size":2391,"mtime":1640356933814,"results":"70","hashOfConfig":"66"},{"size":631,"mtime":1609169972354,"results":"71","hashOfConfig":"66"},{"size":4160,"mtime":1640099918517,"results":"72","hashOfConfig":"66"},{"size":2365,"mtime":1636809062623,"results":"73","hashOfConfig":"66"},{"size":1161,"mtime":1630731038971,"results":"74","hashOfConfig":"66"},{"size":4996,"mtime":1640350425620,"results":"75","hashOfConfig":"66"},{"size":4233,"mtime":1640099918586,"results":"76","hashOfConfig":"66"},{"size":4658,"mtime":1630731038791,"results":"77","hashOfConfig":"66"},{"size":4260,"mtime":1640099918564,"results":"78","hashOfConfig":"66"},{"size":4690,"mtime":1630731038827,"results":"79","hashOfConfig":"66"},{"size":4172,"mtime":1640099918557,"results":"80","hashOfConfig":"66"},{"size":5252,"mtime":1630731038810,"results":"81","hashOfConfig":"66"},{"size":6416,"mtime":1630731038599,"results":"82","hashOfConfig":"66"},{"size":4598,"mtime":1640099918524,"results":"83","hashOfConfig":"66"},{"size":10153,"mtime":1640099477870,"results":"84","hashOfConfig":"66"},{"size":425,"mtime":1606228038918,"results":"85","hashOfConfig":"66"},{"size":9762,"mtime":1640099121157,"results":"86","hashOfConfig":"66"},{"size":16043,"mtime":1640099121137,"results":"87","hashOfConfig":"66"},{"size":20355,"mtime":1636554613841,"results":"88","hashOfConfig":"66"},{"size":8671,"mtime":1630731038568,"results":"89","hashOfConfig":"66"},{"size":11742,"mtime":1636257745286,"results":"90","hashOfConfig":"66"},{"size":8846,"mtime":1635087929201,"results":"91","hashOfConfig":"66"},{"size":5694,"mtime":1635088028700,"results":"92","hashOfConfig":"66"},{"size":510,"mtime":1614505501386,"results":"93","hashOfConfig":"66"},{"size":10283,"mtime":1640351392574,"results":"94","hashOfConfig":"66"},{"size":152,"mtime":1614410387877,"results":"95","hashOfConfig":"66"},{"size":637,"mtime":1616923822413,"results":"96","hashOfConfig":"97"},{"size":4678,"mtime":1640267808738,"results":"98","hashOfConfig":"66"},{"size":23908,"mtime":1640351392670,"results":"99","hashOfConfig":"66"},{"size":5832,"mtime":1640351392655,"results":"100","hashOfConfig":"66"},{"size":12123,"mtime":1640351392638,"results":"101","hashOfConfig":"66"},{"size":6265,"mtime":1625065846323,"results":"102","hashOfConfig":"97"},{"size":1073,"mtime":1628694418183,"results":"103","hashOfConfig":"66"},{"size":1091,"mtime":1628694418060,"results":"104","hashOfConfig":"66"},{"size":1086,"mtime":1628694418008,"results":"105","hashOfConfig":"66"},{"size":42,"mtime":1626610061340,"results":"106","hashOfConfig":"66"},{"size":24891,"mtime":1640351613299,"results":"107","hashOfConfig":"66"},{"size":1391,"mtime":1627130495987,"results":"108","hashOfConfig":"66"},{"size":5266,"mtime":1639587285127,"results":"109","hashOfConfig":"66"},{"size":1772,"mtime":1626919829555,"results":"110","hashOfConfig":"66"},{"size":7500,"mtime":1640351392599,"results":"111","hashOfConfig":"66"},{"size":11585,"mtime":1640351392699,"results":"112","hashOfConfig":"66"},{"size":4817,"mtime":1636725249356,"results":"113","hashOfConfig":"66"},{"size":7445,"mtime":1640351392591,"results":"114","hashOfConfig":"66"},{"size":10038,"mtime":1636257745301,"results":"115","hashOfConfig":"66"},{"size":4868,"mtime":1634992168522,"results":"116","hashOfConfig":"66"},{"size":4543,"mtime":1640099918531,"results":"117","hashOfConfig":"66"},{"size":4721,"mtime":1630731038855,"results":"118","hashOfConfig":"66"},{"size":2092,"mtime":1635260176193,"results":"119","hashOfConfig":"66"},{"size":11041,"mtime":1636257745326,"results":"120","hashOfConfig":"66"},{"size":13370,"mtime":1640351392627,"results":"121","hashOfConfig":"66"},{"size":5475,"mtime":1634831910988,"results":"122","hashOfConfig":"66"},{"size":3922,"mtime":1636257603778,"results":"123","hashOfConfig":"66"},{"size":168,"mtime":1634992168540,"results":"124","hashOfConfig":"66"},{"size":5288,"mtime":1635000030933,"results":"125","hashOfConfig":"66"},{"size":4826,"mtime":1635009407377,"results":"126","hashOfConfig":"66"},{"size":5997,"mtime":1635009857006,"results":"127","hashOfConfig":"66"},{"size":5571,"mtime":1635011663936,"results":"128","hashOfConfig":"66"},{"size":1207,"mtime":1640357341084,"results":"129","hashOfConfig":"66"},{"size":246,"mtime":1640351392581,"results":"130","hashOfConfig":"66"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},"1pv9a84",{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"133"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"133"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"133"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"133"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"133"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"133"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"133"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"133"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"133"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"133"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"133"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"133"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cda36a",{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"133"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"133"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"133"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"133"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"133"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"133"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"133"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"133"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"133"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"133"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"133"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"133"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"133"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"133"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\App.tsx",[],["286","287"],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\menu\\MenuEdit.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\CommonListPage.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\index\\Index.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\index\\Main.tsx",["288","289"],"import React from \"react\";\r\nimport {Table, Button, Card, message} from 'antd';\r\nimport axios from \"axios\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport {ApiUrlConfig} from \"../../config/api.url\";\r\nimport {RandomUtils} from \"../../utils/RandomUtils\";\r\ninterface IProps {}\r\ntype MainProps = IProps & RouteComponentProps;\r\n\r\ninterface ProjectModel {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    addTime: string;\r\n    addUser: string;\r\n    lastModifyUser: string;\r\n    lastModifyTime: string;\r\n    status: number;\r\n}\r\n\r\ninterface IState {\r\n    myProjects: ProjectModel[];\r\n}\r\n\r\nclass Main extends React.Component<MainProps, IState> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            myProjects: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.loadMyProjects();\r\n    }\r\n\r\n    loadMyProjects() {\r\n        axios.get(ApiUrlConfig.GET_PERSONAL_PROJECTS_URL).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载列表失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    this.setState({\r\n                        myProjects: ret.data\r\n                    })\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onClickProject(id: number) {\r\n        window[\"__ROUTER__\"].push('/nodemanage/6');\r\n    }\r\n\r\n    renderMyProjects() {\r\n        const cards = this.state.myProjects.map(v => {\r\n            const k = RandomUtils.getKey();\r\n            return (<Card onClick={() => this.onClickProject(v.id)} className=\"project-card\" title={v.name} bordered={false} style={{ width: 300 }} key={k}>\r\n                <p>{v.description}</p>\r\n            </Card>)\r\n        });\r\n        return cards;\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"card\">\r\n            <div className=\"card-header card-header-divider\">我的项目<span className=\"card-subtitle\">我参与的项目</span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"my-projects-row\">\r\n                    {this.renderMyProjects()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Main);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\index.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\menu\\MenuList.tsx",["290"],"import React from 'react';\r\nimport {Table, Button, Tooltip} from 'antd';\r\nimport { Input } from 'antd';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport CommonListPage from \"../../common/CommonListPage\";\r\nimport {CommonApiUrlModel} from \"../../../entities/CommonApiUrlModel\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\n\r\nconst { Search } = Input;\r\n\r\n\r\nclass MenuList extends CommonListPage {\r\n    constructor(props) {\r\n        super(props);\r\n        const commonApiUrlModel: CommonApiUrlModel = {\r\n            listUrl: ApiUrlConfig.QUERY_MENU_LIST_URL,\r\n            saveUrl: ApiUrlConfig.SAVE_MENU_URL,\r\n            deleteUrl: ApiUrlConfig.DELETE_MENU_URL,\r\n            loadUrl: ApiUrlConfig.LOAD_MENU_URL,\r\n            editUrl: '/menuedit/:id'\r\n        };\r\n        this.commonApiUrlModel = commonApiUrlModel;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadDataList(this.state.pagination);\r\n    }\r\n\r\n    onSearch = (value) => {\r\n        let filterConditionList =\r\n            [{\"columnName\": \"menu_name\", \"value\":value},\r\n                {\"columnName\": \"id\", \"operator\": \"=\", \"value\":value}];\r\n        this._onSearch({searchValue: value}, filterConditionList);\r\n    }\r\n    onChange = (pagination, filters, sorter) => {\r\n        this.loadDataListSort(pagination, filters, sorter);\r\n        this.setState({sortedInfo: sorter});\r\n    }\r\n\r\n    render() {\r\n        const columns: any[] = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'id',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '名称',\r\n                dataIndex: 'menuName',\r\n                render: (text, record) => <Button\r\n                    className=\"padding-left0\"\r\n                    size=\"small\"\r\n                    type=\"link\"\r\n                    onClick={() => this.edit(record.id)}>{text}</Button>,\r\n            },{\r\n                title: 'URL',\r\n                dataIndex: 'url',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建者',\r\n                dataIndex: 'addUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建时间',\r\n                dataIndex: 'addTime',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改者',\r\n                dataIndex: 'lastModifyUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改时间',\r\n                dataIndex: 'lastModifyTime',\r\n                key: 'last_modify_time',\r\n                sorter: ()=>{},\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '操作',\r\n                render: (text, record) => (\r\n                    <div>\r\n                        <Button className=\"padding-left0\" size=\"small\" type=\"link\" onClick={() => this.edit(record.id)}>修改</Button>\r\n                        <Button danger size=\"small\" type=\"link\" onClick={() => this.delete(record.id)}>删除</Button>\r\n                    </div>\r\n                ),\r\n            },\r\n        ];\r\n        return (<div className=\"card\">\r\n            <div className=\"card-header card-header-divider\">菜单<span className=\"card-subtitle\">最多配置三级菜单</span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"list-toolbar\">\r\n                    <Search placeholder=\"Id或者名称\" onSearch={this.onSearch} enterButton style={{ width: 400,}}/>\r\n                    <Button type=\"primary\" onClick={() => this.edit(0)}>添加菜单</Button>\r\n                </div>\r\n                <Table columns={columns}\r\n                       dataSource={this.state.data}\r\n                       size=\"small\"\r\n                       footer={() => '共' + this.state.pagination.total + '条数据'}\r\n                       loading={this.state.loading}\r\n                       pagination={this.state.pagination}\r\n                       onChange={this.onChange}\r\n                />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default withRouter(MenuList);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\Login.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\config\\axios.config.ts",["291"],"import axios from 'axios';\r\nimport {BaseUrl} from \"./api.url\";\r\n\r\nconst initAxios = () =>\r\n{\r\n    axios.defaults.baseURL = BaseUrl;\r\n    axios.defaults.headers.post['Content-Type'] = 'application/json';\r\n    axios.interceptors.request.use(function (config) {\r\n        config.withCredentials = true\r\n        config.headers = {\r\n            \"token\": localStorage.getItem('token')\r\n        }\r\n        return config;\r\n    }, function (error) {\r\n        console.log(error);\r\n        return Promise.reject(error);\r\n    });\r\n    axios.interceptors.response.use(\r\n        response => {\r\n            return Promise.resolve(response)\r\n        },\r\n        error => {\r\n            if(!error.response) {\r\n                return Promise.reject({code: -1, message: ''});\r\n            }\r\n            if (error.response.status === 401) {\r\n                const data = {\r\n                    code: -1,\r\n                    message: '未授权'\r\n                }\r\n                window[\"__ROUTER__\"].push('/login');\r\n                return Promise.reject(data)\r\n            }\r\n            return Promise.reject(error)\r\n        }\r\n    )\r\n}\r\n\r\nexport default {\r\n    initAxios\r\n}\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\config\\route.config.ts",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\user\\UserList.tsx",["292"],"import React from 'react';\r\nimport {Table, Button, Tooltip} from 'antd';\r\nimport { Input } from 'antd';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport CommonListPage from \"../../common/CommonListPage\";\r\nimport {CommonApiUrlModel} from \"../../../entities/CommonApiUrlModel\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\n\r\nconst { Search } = Input;\r\n\r\n\r\nclass UserList extends CommonListPage {\r\n    constructor(props) {\r\n        super(props);\r\n        const commonApiUrlModel: CommonApiUrlModel = {\r\n            listUrl: ApiUrlConfig.QUERY_USER_LIST_URL,\r\n            saveUrl: ApiUrlConfig.SAVE_USER_URL,\r\n            deleteUrl: ApiUrlConfig.DELETE_USER_URL,\r\n            loadUrl: ApiUrlConfig.LOAD_USER_URL,\r\n            editUrl: '/useredit/:id'\r\n        };\r\n        this.commonApiUrlModel = commonApiUrlModel;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadDataList(this.state.pagination);\r\n    }\r\n\r\n    onSearch = (value) => {\r\n        let filterConditionList =\r\n            [{\"columnName\": \"username\", \"value\":value},\r\n                {\"columnName\": \"chinese_name\", \"value\":value}];\r\n        this._onSearch({searchValue: value}, filterConditionList);\r\n    }\r\n\r\n    onChange = (pagination) => {\r\n        this.loadDataList(pagination);\r\n    }\r\n\r\n    userRoleSetting(id) {\r\n        this.props.history.push('/userrolesetting/' + id);\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'id',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '英文名',\r\n                dataIndex: 'username',\r\n                render: (text, record) => <Button\r\n                    className=\"padding-left0\"\r\n                    size=\"small\"\r\n                    type=\"link\"\r\n                    onClick={() => this.edit(record.id)}>{text}</Button>,\r\n            },{\r\n                title: '中文名',\r\n                dataIndex: 'chineseName',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建者',\r\n                dataIndex: 'addUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建时间',\r\n                dataIndex: 'addTime',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改者',\r\n                dataIndex: 'lastModifyUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改时间',\r\n                dataIndex: 'lastModifyTime',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '操作',\r\n                render: (text, record) => (\r\n                    <div>\r\n                        <Button className=\"padding-left0\" size=\"small\" type=\"link\" onClick={() => this.edit(record.id)}>修改</Button>\r\n                        <Button danger size=\"small\" type=\"link\" onClick={() => this.delete(record.id)}>删除</Button>\r\n                        <Button size=\"small\" type=\"link\" onClick={() => this.userRoleSetting(record.id)}>用户角色</Button>\r\n                    </div>\r\n                ),\r\n            },\r\n        ];\r\n        return (<div className=\"card\">\r\n            <div className=\"card-header card-header-divider\">用户<span className=\"card-subtitle\">管理员可以配置</span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"list-toolbar\">\r\n                    <Search placeholder=\"英文名或中文名\" onSearch={this.onSearch} enterButton style={{ width: 400,}}/>\r\n                    <Button type=\"primary\" onClick={() => this.edit(0)}>添加用户</Button>\r\n                </div>\r\n                <Table columns={columns}\r\n                       dataSource={this.state.data}\r\n                       size=\"small\"\r\n                       footer={() => '共' + this.state.pagination.total + '条数据'}\r\n                       loading={this.state.loading}\r\n                       pagination={this.state.pagination}\r\n                       onChange={this.onChange}\r\n                />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default withRouter(UserList);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\user\\UserEdit.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\project\\ProjectList.tsx",["293"],"import React from 'react';\r\nimport {Table, Button, Tooltip} from 'antd';\r\nimport { Input } from 'antd';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport CommonListPage from \"../../common/CommonListPage\";\r\nimport {CommonApiUrlModel} from \"../../../entities/CommonApiUrlModel\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\n\r\nconst { Search } = Input;\r\n\r\n\r\nclass ProjectList extends CommonListPage {\r\n    constructor(props) {\r\n        super(props);\r\n        const commonApiUrlModel: CommonApiUrlModel = {\r\n            listUrl: ApiUrlConfig.QUERY_PROJECT_LIST_URL,\r\n            saveUrl: ApiUrlConfig.SAVE_PROJECT_URL,\r\n            deleteUrl: ApiUrlConfig.DELETE_PROJECT_URL,\r\n            loadUrl: ApiUrlConfig.LOAD_PROJECT_URL,\r\n            editUrl: '/projectedit/:id'\r\n        };\r\n        this.commonApiUrlModel = commonApiUrlModel;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadDataList(this.state.pagination);\r\n    }\r\n\r\n    onSearch = (value) => {\r\n        let filterConditionList =\r\n            [{\"columnName\": \"id\", \"operator\": \"=\", \"value\":value},\r\n                {\"columnName\": \"name\", \"value\":value}];\r\n        this._onSearch({searchValue: value}, filterConditionList);\r\n    }\r\n\r\n    onChange = (pagination) => {\r\n        this.loadDataList(pagination);\r\n    }\r\n\r\n    projectUserSetting(id: number) {\r\n        this.props.history.push('/projectusersetting/' + id);\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'id',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '名称',\r\n                dataIndex: 'name',\r\n                render: (text, record) => <Button\r\n                    className=\"padding-left0\"\r\n                    size=\"small\"\r\n                    type=\"link\"\r\n                    onClick={() => this.edit(record.id)}>{text}</Button>,\r\n            },{\r\n                title: '描述',\r\n                dataIndex: 'description',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建者',\r\n                dataIndex: 'addUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建时间',\r\n                dataIndex: 'addTime',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改者',\r\n                dataIndex: 'lastModifyUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改时间',\r\n                dataIndex: 'lastModifyTime',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '操作',\r\n                render: (text, record) => (\r\n                    <div>\r\n                        <Button className=\"padding-left0\" size=\"small\" type=\"link\" onClick={() => this.edit(record.id)}>修改</Button>\r\n                        <Button danger size=\"small\" type=\"link\" onClick={() => this.delete(record.id)}>删除</Button>\r\n                        <Button size=\"small\" type=\"link\" onClick={() => this.projectUserSetting(record.id)}>用户维护</Button>\r\n                    </div>\r\n                ),\r\n            },\r\n        ];\r\n        return (<div className=\"card\">\r\n            <div className=\"card-header card-header-divider\">项目<span className=\"card-subtitle\">管理员可以配置</span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"list-toolbar\">\r\n                    <Search placeholder=\"id或项目名称\" onSearch={this.onSearch} enterButton style={{ width: 400,}}/>\r\n                    <Button type=\"primary\" onClick={() => this.edit(0)}>添加项目</Button>\r\n                </div>\r\n                <Table columns={columns}\r\n                       dataSource={this.state.data}\r\n                       size=\"small\"\r\n                       footer={() => '共' + this.state.pagination.total + '条数据'}\r\n                       loading={this.state.loading}\r\n                       pagination={this.state.pagination}\r\n                       onChange={this.onChange}\r\n                />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default withRouter(ProjectList);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\project\\ProjectEdit.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\right\\RightList.tsx",["294"],"import React from 'react';\r\nimport {Table, Button, Tooltip} from 'antd';\r\nimport { Input } from 'antd';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport CommonListPage from \"../../common/CommonListPage\";\r\nimport {CommonApiUrlModel} from \"../../../entities/CommonApiUrlModel\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\n\r\nconst { Search } = Input;\r\n\r\n\r\nclass RightList extends CommonListPage {\r\n    constructor(props) {\r\n        super(props);\r\n        const commonApiUrlModel: CommonApiUrlModel = {\r\n            listUrl: ApiUrlConfig.QUERY_RIGHT_LIST_URL,\r\n            saveUrl: ApiUrlConfig.SAVE_RIGHT_URL,\r\n            deleteUrl: ApiUrlConfig.DELETE_RIGHT_URL,\r\n            loadUrl: ApiUrlConfig.LOAD_RIGHT_URL,\r\n            editUrl: '/rightedit/:id'\r\n        };\r\n        this.commonApiUrlModel = commonApiUrlModel;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadDataList(this.state.pagination);\r\n    }\r\n\r\n    onSearch = (value) => {\r\n        let filterConditionList =\r\n            [{\"columnName\": \"id\", \"operator\": \"=\", \"value\":value},\r\n                {\"columnName\": \"name\", \"value\":value}];\r\n        this._onSearch({searchValue: value}, filterConditionList);\r\n    }\r\n\r\n    onChange = (pagination) => {\r\n        this.loadDataList(pagination);\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'id',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '名称',\r\n                dataIndex: 'name',\r\n                render: (text, record) => <Button\r\n                    className=\"padding-left0\"\r\n                    size=\"small\"\r\n                    type=\"link\"\r\n                    onClick={() => this.edit(record.id)}>{text}</Button>,\r\n            },{\r\n                title: '路径',\r\n                dataIndex: 'uri',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '类型',\r\n                dataIndex: 'type',\r\n                render: text => <span>{text === 1 ? '系统类型' : '项目类型'}</span>,\r\n            },{\r\n                title: '创建者',\r\n                dataIndex: 'addUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建时间',\r\n                dataIndex: 'addTime',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改者',\r\n                dataIndex: 'lastModifyUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改时间',\r\n                dataIndex: 'lastModifyTime',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '操作',\r\n                render: (text, record) => (\r\n                    <div>\r\n                        <Button className=\"padding-left0\" size=\"small\" type=\"link\" onClick={() => this.edit(record.id)}>修改</Button>\r\n                        <Button danger size=\"small\" type=\"link\" onClick={() => this.delete(record.id)}>删除</Button>\r\n                    </div>\r\n                ),\r\n            },\r\n        ];\r\n        return (<div className=\"card\">\r\n            <div className=\"card-header card-header-divider\">权限<span className=\"card-subtitle\">管理员可以配置</span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"list-toolbar\">\r\n                    <Search placeholder=\"id或名称\" onSearch={this.onSearch} enterButton style={{ width: 400,}}/>\r\n                    <Button type=\"primary\" onClick={() => this.edit(0)}>添加权限</Button>\r\n                </div>\r\n                <Table columns={columns}\r\n                       dataSource={this.state.data}\r\n                       size=\"small\"\r\n                       footer={() => '共' + this.state.pagination.total + '条数据'}\r\n                       loading={this.state.loading}\r\n                       pagination={this.state.pagination}\r\n                       onChange={this.onChange}\r\n                />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default withRouter(RightList);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\right\\RightEdit.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\role\\RoleEdit.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\role\\RoleList.tsx",["295"],"import React from 'react';\r\nimport { Table, Button } from 'antd';\r\nimport { Input, Tooltip } from 'antd';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport CommonListPage from \"../../common/CommonListPage\";\r\nimport {CommonApiUrlModel} from \"../../../entities/CommonApiUrlModel\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\n\r\nconst { Search } = Input;\r\n\r\n\r\nclass RoleList extends CommonListPage {\r\n    constructor(props) {\r\n        super(props);\r\n        const commonApiUrlModel: CommonApiUrlModel = {\r\n            listUrl: ApiUrlConfig.QUERY_ROLE_LIST_URL,\r\n            saveUrl: ApiUrlConfig.SAVE_ROLE_URL,\r\n            deleteUrl: ApiUrlConfig.DELETE_ROLE_URL,\r\n            loadUrl: ApiUrlConfig.LOAD_ROLE_URL,\r\n            editUrl: '/roleedit/:id'\r\n        };\r\n        this.commonApiUrlModel = commonApiUrlModel;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadDataList(this.state.pagination);\r\n    }\r\n\r\n    onSearch = (value) => {\r\n        let filterConditionList =\r\n            [{\"columnName\": \"id\", \"operator\": \"=\", \"value\":value},\r\n                {\"columnName\": \"name\", \"value\":value}];\r\n        this._onSearch({searchValue: value}, filterConditionList);\r\n    }\r\n\r\n    onChange = (pagination) => {\r\n        this.loadDataList(pagination);\r\n    }\r\n\r\n    setRight(id) {\r\n        this.props.history.push('/rolerightsetting/' + id);\r\n    }\r\n\r\n    render() {\r\n        const roleTypeDescription = {1: '系统角色', 2: '项目角色'};\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'id',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '名称',\r\n                dataIndex: 'name',\r\n                render: (text, record) => <Button\r\n                    className=\"padding-left0\"\r\n                    size=\"small\"\r\n                    type=\"link\"\r\n                    onClick={() => this.edit(record.id)}>{text}</Button>,\r\n            },{\r\n                title: '中文名称',\r\n                dataIndex: 'chineseName',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '描述',\r\n                dataIndex: 'description',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '类型',\r\n                dataIndex: 'type',\r\n                render: text => <span>{roleTypeDescription[text]}</span>,\r\n            },{\r\n                title: '创建者',\r\n                dataIndex: 'addUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建时间',\r\n                dataIndex: 'addTime',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改者',\r\n                dataIndex: 'lastModifyUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改时间',\r\n                dataIndex: 'lastModifyTime',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '操作',\r\n                render: (text, record) => (\r\n                    <div>\r\n                        <Button className=\"padding-left0\" size=\"small\" type=\"link\" onClick={() => this.edit(record.id)}>修改</Button>\r\n                        <Button danger size=\"small\" type=\"link\" onClick={() => this.delete(record.id)}>删除</Button>\r\n                        <Button size=\"small\" type=\"link\" onClick={() => this.setRight(record.id)}>权限关联</Button>\r\n                    </div>\r\n                ),\r\n            },\r\n        ];\r\n        return (<div className=\"card\">\r\n            <div className=\"card-header card-header-divider\">角色<span className=\"card-subtitle\">管理员可以配置</span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"list-toolbar\">\r\n                    <Search placeholder=\"id或名称\" onSearch={this.onSearch} enterButton style={{ width: 400,}}/>\r\n                    <Button type=\"primary\" onClick={() => this.edit(0)}>添加角色</Button>\r\n                </div>\r\n                <Table columns={columns}\r\n                       dataSource={this.state.data}\r\n                       size=\"small\"\r\n                       footer={() => '共' + this.state.pagination.total + '条数据'}\r\n                       loading={this.state.loading}\r\n                       pagination={this.state.pagination}\r\n                       onChange={this.onChange}\r\n                />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default withRouter(RoleList);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\role\\RoleRightSetting.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\reportWebVitals.ts",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\user\\UserRoleSetting.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\manage\\project\\ProjectUserSetting.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\CommonNodeTree.tsx",["296"],"import React, { useState, useEffect } from 'react';\r\nimport {Tree, Tooltip, message, Menu, Modal, Form, Input, Button} from 'antd';\r\nimport { Radio } from 'antd';\r\nimport axios from \"axios\";\r\nimport {AntDataNode} from \"../../entities/AntDataNode\";\r\nimport {FormInstance} from \"antd/lib/form\";\r\nimport {DataTypeEnum} from \"../../entities/DataTypeEnum\";\r\nimport {ApiUrlConfig} from \"../../config/api.url\";\r\n\r\ninterface IState {\r\n    projectId ?: number|null;\r\n    dataTypeId ?: number|null;\r\n    initTreeData : AntDataNode[];\r\n    setRenderRightFlag: any;\r\n    setNodeId: any;\r\n}\r\n\r\nconst defaultExpandedKeys = ['1-1'];\r\nconst rightMenuInitKeys = [\r\n    {key: '1', title: '新建', disabled: false},\r\n    {key: '2', title: '修改', disabled: false},\r\n    {key: '3', title: '删除', disabled: false},\r\n    {key: '4', title: '复制', disabled: false},\r\n    {key: '5', title: '粘贴', disabled: false},\r\n    {key: '99', title: '刷新', disabled: false}\r\n    ];\r\nconst rightMenuInitStyle = {\r\n    width: 200,\r\n    display: 'none',\r\n    position: 'absolute',\r\n    top: '10000px',\r\n    left: '10000px',\r\n    borderRadius: '3px',\r\n    zIndex: 20\r\n};\r\n\r\n// It's just a simple demo. You can use tree map to optimize update perf.\r\nfunction updateTreeData(list: AntDataNode[], key: React.Key, children: AntDataNode[]): AntDataNode[] {\r\n    return list.map(node => {\r\n        if (node.key === key) {\r\n            return {\r\n                ...node,\r\n                children,\r\n            };\r\n        } else if (node.children) {\r\n            return {\r\n                ...node,\r\n                children: updateTreeData(node.children, key, children),\r\n            };\r\n        }\r\n        return node;\r\n    });\r\n}\r\n\r\nconst CommonNodeTree: React.FC<IState> = (props) => {\r\n    const {setRenderRightFlag} = props;\r\n    const {setNodeId} = props;\r\n    const [treeData, setTreeData] = useState(props.initTreeData);\r\n    const [projectId, setProjectId] = useState(props.projectId);\r\n    const [dataTypeId, setDataTypeId] = useState(props.dataTypeId);\r\n    const [contextMenuPosition, setContextMenuPosition] = useState(rightMenuInitStyle);\r\n    const [rightMenuKeys, setRightMenuKeys] = useState(rightMenuInitKeys);\r\n    const [currNode, setCurrNode] = useState({} as AntDataNode);\r\n    const [titleNodeEdit, setTitleNodeEdit] = useState('新增节点');\r\n    const [visibleNodeEdit, setVisibleNodeEdit] = useState(false);\r\n    const [confirmSavingNodeEdit, setConfirmSavingNodeEdit] = useState(false);\r\n    const [isFolderFormItemHidden, setIsFolderFormItemHidden] = useState(false);\r\n    const [copyNode, setCopyNode] = useState({} as AntDataNode);\r\n    const [expandedKeys, setExpandedKeys] = useState(['1-1']);\r\n    const [initialValues, setInitialValues] = useState({isFolder: 0, name: '', description: ''});\r\n    if(projectId !== props.projectId) {\r\n        setProjectId(props.projectId);\r\n    }\r\n    if(dataTypeId !== props.dataTypeId) {\r\n        setDataTypeId(props.dataTypeId);\r\n    }\r\n    if(projectId !== props.projectId || dataTypeId !== props.dataTypeId) {\r\n        setTreeData(props.initTreeData);\r\n        onLoadData({key: '1-1', children: undefined}).then(() => {});\r\n    }\r\n    const [ref] = useState(React.createRef<FormInstance>());\r\n\r\n    function onLoadData(node: any) {\r\n        return new Promise<void>(resolve => {\r\n            if(!projectId || !dataTypeId) {\r\n                resolve();\r\n                return ;\r\n            }\r\n            if (node.children) {\r\n                resolve();\r\n                return;\r\n            }\r\n            axios.post(ApiUrlConfig.GET_NODES_TREE_URL, {projectId: props.projectId, dataTypeId: props.dataTypeId, parentId: node.key.split('-')[0]}).then(resp => {\r\n                if (resp.status !== 200) {\r\n                    message.error('获取数据失败');\r\n                } else {\r\n                    const ret = resp.data;\r\n                    if (ret.code !== 0) {\r\n                        message.error(ret.message);\r\n                    } else {\r\n                        const children = ret.data.map(v => {\r\n                            const n: AntDataNode = {title: null, dataNode: undefined, isLeaf: false, key: ''};\r\n                            n.title = <Tooltip overlayClassName=\"small-font-size\" title={v.name} color=\"#2db7f5\" placement=\"rightTop\">\r\n                                <span>{v.name}</span>\r\n                            </Tooltip>;\r\n                            n.key = v.id + '-' + v.dataTypeId + '-' + new Date().getTime();\r\n                            n.isLeaf = v.isFolder === 1 ? false : true;\r\n                            n.dataNode = v;\r\n                            n.parentNode = node;\r\n                            return n;\r\n                        });\r\n                        setTreeData(origin =>\r\n                            updateTreeData(origin, node.key, children),\r\n                        );\r\n                        if(expandedKeys.indexOf(node.key) < 0) {\r\n                            setExpandedKeys([...expandedKeys, node.key]);\r\n                        }\r\n                        resolve();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    function onDragEnter (info) {\r\n        //console.log(info);\r\n        // expandedKeys 需要受控时设置\r\n        // this.setState({\r\n        //   expandedKeys: info.expandedKeys,\r\n        // });\r\n    };\r\n\r\n    function dropAfter(info, newParentId) {\r\n        const dropKey = info.node.key;\r\n        const dragKey = info.dragNode.key;\r\n        const dropPos = info.node.pos.split('-');\r\n        const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n        const loop = (data, key, callback) => {\r\n            for (let i = 0; i < data.length; i++) {\r\n                if (data[i].key === key) {\r\n                    return callback(data[i], i, data);\r\n                }\r\n                if (data[i].children) {\r\n                    loop(data[i].children, key, callback);\r\n                }\r\n            }\r\n        };\r\n        const data = [...treeData];\r\n\r\n        // Find dragObject\r\n        let dragObj;\r\n        loop(data, dragKey, (item, index, arr) => {\r\n            arr.splice(index, 1);\r\n            dragObj = item;\r\n            dragObj.dataNode.parentId = newParentId;\r\n        });\r\n\r\n        if (!info.dropToGap) {\r\n            // Drop on the content\r\n            loop(data, dropKey, item => {\r\n                item.children = item.children || [];\r\n                // where to insert 示例添加到头部，可以是随意位置\r\n                item.children.unshift(dragObj);\r\n            });\r\n        } else if (\r\n            (info.node.props.children || []).length > 0 && // Has children\r\n            info.node.props.expanded && // Is expanded\r\n            dropPosition === 1 // On the bottom gap\r\n        ) {\r\n            loop(data, dropKey, item => {\r\n                item.children = item.children || [];\r\n                // where to insert 示例添加到头部，可以是随意位置\r\n                item.children.unshift(dragObj);\r\n                // in previous version, we use item.children.push(dragObj) to insert the\r\n                // item to the tail of the children\r\n            });\r\n        } else {\r\n            let ar;\r\n            let i;\r\n            loop(data, dropKey, (item, index, arr) => {\r\n                ar = arr;\r\n                i = index;\r\n            });\r\n            if (dropPosition === -1) {\r\n                ar.splice(i, 0, dragObj);\r\n            } else {\r\n                ar.splice(i + 1, 0, dragObj);\r\n            }\r\n        }\r\n\r\n        setTreeData(data);\r\n    }\r\n\r\n    function allowDrop({ dropNode, dropPosition }) {\r\n        //console.log(dropNode);\r\n        //console.log(dropPosition);\r\n        if(dropNode.isLeaf && dropPosition === 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function onSelect(selectedKeys, e:{selected: boolean, selectedNodes, node, event}) {\r\n        if(e.node.isLeaf) {\r\n            setRenderRightFlag(Number(dataTypeId));\r\n            setNodeId(e.node.dataNode.id);\r\n        } else {\r\n            setRenderRightFlag(DataTypeEnum.ALL);\r\n        }\r\n    }\r\n\r\n    function onDrop(info) {\r\n        //console.log(info);\r\n        const dropKey = info.node.key;\r\n        const moveInfo = {prevId: 0,\r\n            id: info.dragNode.dataNode.id,\r\n            parentId: 0,\r\n            projectId: projectId,\r\n            dataTypeId: dataTypeId\r\n        };\r\n        if(!info.dropToGap) {\r\n            if(dropKey === '1-1') {\r\n                moveInfo.parentId = 1;\r\n            }else{\r\n                moveInfo.parentId = info.node.dataNode.id;\r\n            }\r\n        }else{\r\n            moveInfo.prevId = info.node.dataNode.id;\r\n            moveInfo.parentId = info.node.dataNode.parentId;\r\n        }\r\n        axios.post(ApiUrlConfig.MOVE_NODE_URL, moveInfo).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('移动节点失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                    dropAfter(info, moveInfo.parentId);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function hideRightMenu(e) {\r\n        setContextMenuPosition({\r\n            width: 170,\r\n            display: 'none',\r\n            position: 'absolute',\r\n            top: '10000px', left: '10000px',\r\n            borderRadius: '3px',\r\n            zIndex: 20 });\r\n        e.stopPropagation();\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', hideRightMenu);\r\n        return () => {\r\n            document.removeEventListener('click', ()=>{});\r\n        }\r\n    }, []);\r\n\r\n    function handleAddNode() {\r\n        setTitleNodeEdit('新增节点');\r\n        setIsFolderFormItemHidden(false);\r\n        setVisibleNodeEdit(true);\r\n        if(ref.current) {\r\n            ref.current.setFieldsValue({isFolder: 0, name: '', description: ''});\r\n        }\r\n    }\r\n\r\n    function handleModifyNode() {\r\n        setTitleNodeEdit('修改节点');\r\n        setIsFolderFormItemHidden(true);\r\n        const values = {\r\n            isFolder: currNode.dataNode?.isFolder || 0,\r\n            name: currNode.dataNode?.name || '',\r\n            description: currNode.dataNode?.description || ''\r\n        };\r\n        setInitialValues(values);\r\n        if(ref.current) {\r\n            ref.current.setFieldsValue(values);\r\n        }\r\n        setVisibleNodeEdit(true);\r\n    }\r\n\r\n    function handleDeleteNode() {\r\n        if(!window.confirm('确认删除吗？')) {\r\n            return ;\r\n        }\r\n        axios.post(ApiUrlConfig.DELETE_NODE_URL,\r\n            {dataTypeId: dataTypeId, projectId: projectId, id: currNode.dataNode?.id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('操作失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                    onLoadData({key: currNode.parentNode.key || currNode.key, children: undefined}).then(() => {\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleCopyNode() {\r\n        setCopyNode(currNode);\r\n        message.success('复制[' + currNode.dataNode?.name + ']成功');\r\n    }\r\n\r\n    function handlePasteNode() {\r\n        let prevId: any = currNode.dataNode?.id;\r\n        let parentId: any = currNode.dataNode?.parentId;\r\n        let key: any = (currNode.parentNode && currNode.parentNode.key) || '1-1';\r\n        if(!currNode.isLeaf) {\r\n            prevId = null;\r\n            parentId = currNode.dataNode?.id;\r\n            key = currNode.key;\r\n        }\r\n        axios.post(ApiUrlConfig.COPY_NODE_URL,\r\n            {\r\n                dataTypeId: dataTypeId,\r\n                projectId: projectId,\r\n                id: copyNode.dataNode?.id,\r\n                parentId: parentId,\r\n                prevId: prevId\r\n            }).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('操作失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                    onLoadData({key: key || currNode.key, children: undefined}).then(() => {\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleRefreshNode() {\r\n        onLoadData({key: currNode.key, children: undefined}).then(() => {\r\n        });\r\n    }\r\n\r\n    function onClickRightMenuItem({ item, key, keyPath, domEvent }) {\r\n        switch (key) {\r\n            case '1':\r\n                handleAddNode();\r\n                break;\r\n            case '2':\r\n                handleModifyNode();\r\n                break;\r\n            case '3':\r\n                handleDeleteNode();\r\n                break;\r\n            case '4':\r\n                handleCopyNode();\r\n                break;\r\n            case '5':\r\n                handlePasteNode();\r\n                break;\r\n            case '99':\r\n                handleRefreshNode();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function renderRightMenu() {\r\n        const list = rightMenuKeys.map(v => {\r\n            return (<Menu.Item key={v.key} disabled={v.disabled}>\r\n                {v.title}\r\n            </Menu.Item>);\r\n        });\r\n        return list;\r\n    }\r\n\r\n    function setRightMenuStatus(node) {\r\n        rightMenuKeys.map(v => {\r\n            v.disabled = false;\r\n            return null;\r\n        });\r\n        if(node.isLeaf) {\r\n            rightMenuKeys.map(v => {\r\n                if(v.key === '1' || v.key === '99') {\r\n                    v.disabled = true;\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n        if(!node.isLeaf) {\r\n            rightMenuKeys.map(v => {\r\n                if(v.key === '1' || v.key === '99') {\r\n                    v.disabled = false;\r\n                }\r\n                if(node.key === '1-1' && (v.key === '2' || v.key === '3' || v.key === '4')) {\r\n                    v.disabled = true;\r\n                }else{\r\n                    v.disabled = false;\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n        setRightMenuKeys(rightMenuKeys);\r\n    }\r\n\r\n    function onExpand(expandedKeys, {expanded: bool, node}) {\r\n        //console.log(expandedKeys);\r\n        //console.log(bool);\r\n        //console.log(node);\r\n        if(!bool) {\r\n            const ind = expandedKeys.indexOf(node.key);\r\n            if(ind > -1) {\r\n                expandedKeys.shift(ind, 1);\r\n            }\r\n        }\r\n        setExpandedKeys(expandedKeys);\r\n    }\r\n\r\n    function onRightClick({event, node}: any) {\r\n        //console.log(event);\r\n        //console.log(node);\r\n        setCurrNode(node);\r\n\r\n        setRightMenuStatus(node);\r\n        const x = event.clientX + 'px';\r\n        const y = event.clientY + 'px';\r\n        setTimeout(function () {\r\n            setContextMenuPosition({\r\n                width: 170,\r\n                display: 'block',\r\n                position: 'absolute',\r\n                top: y, left: x,\r\n                borderRadius: '3px',\r\n                zIndex: 20\r\n            });\r\n        }, 100);\r\n    }\r\n\r\n    const layout = {\r\n        labelCol: { span: 6 },\r\n        wrapperCol: { span: 18 },\r\n    };\r\n\r\n    function handleOkNodeEdit() {\r\n        if(ref.current != null) {\r\n            const values = ref.current.getFieldsValue();\r\n            if(!values.name || values.name.trim() === '') {\r\n                message.info('名称不能为空');\r\n                return;\r\n            }\r\n            if(!values.isFolder) {\r\n                values.isFolder = 0;\r\n            }\r\n            values.dataTypeId = dataTypeId;\r\n            values.projectId = projectId;\r\n            let url = ApiUrlConfig.ADD_NODE_URL;\r\n            if(titleNodeEdit === '新增节点') {\r\n                values.parentId = currNode.dataNode?.id || 1;\r\n                values.id = 0;\r\n            }\r\n            if(titleNodeEdit === '修改节点') {\r\n                url = ApiUrlConfig.UPDATE_NODE_URL;\r\n                values.id = currNode.dataNode?.id;\r\n                values.isFolder = currNode.dataNode?.isFolder;\r\n                values.parentId = currNode.dataNode?.parentId || 1;\r\n                values.prevId = -1;\r\n            }\r\n            setConfirmSavingNodeEdit(true);\r\n            axios.post(url, values).then(resp => {\r\n                if (resp.status !== 200) {\r\n                    message.error('操作失败');\r\n                } else {\r\n                    const ret = resp.data;\r\n                    if (ret.code !== 0) {\r\n                        message.error(ret.message);\r\n                    } else {\r\n                        if(titleNodeEdit === '新增节点') {\r\n                            onLoadData({key: currNode.key, children: undefined}).then(() => {\r\n                            });\r\n                        }\r\n                        if(titleNodeEdit === '修改节点') {\r\n                            onLoadData({key: currNode.parentNode.key || currNode.key, children: undefined}).then(() => {\r\n                            });\r\n                        }\r\n                        setVisibleNodeEdit(false);\r\n                        message.success('操作成功');\r\n                    }\r\n                }\r\n            }).finally(() => {\r\n                setConfirmSavingNodeEdit(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleCancelNodeEdit() {\r\n        setVisibleNodeEdit(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Tree\r\n                className=\"draggable-tree\"\r\n                loadData={onLoadData}\r\n                onRightClick={onRightClick}\r\n                onExpand={onExpand}\r\n                defaultExpandedKeys={defaultExpandedKeys}\r\n                draggable\r\n                blockNode\r\n                expandedKeys={expandedKeys}\r\n                showLine={false}\r\n                onDragEnter={onDragEnter}\r\n                onDrop={onDrop}\r\n                onSelect={onSelect}\r\n                allowDrop={allowDrop}\r\n                treeData={treeData}\r\n            />\r\n            <Menu onClick={onClickRightMenuItem} className=\"node-tree-context-menu\" style={contextMenuPosition as any} mode=\"vertical\">\r\n                {renderRightMenu()}\r\n            </Menu>\r\n            <Modal\r\n                title={titleNodeEdit}\r\n                visible={visibleNodeEdit}\r\n                onOk={handleOkNodeEdit}\r\n                confirmLoading={confirmSavingNodeEdit}\r\n                onCancel={handleCancelNodeEdit}\r\n            >\r\n                <Form\r\n                    {...layout}\r\n                    name=\"nodeForm\"\r\n                    initialValues={initialValues}\r\n                    ref={ref}\r\n                >\r\n                    <Form.Item\r\n                        label=\"节点类型\"\r\n                        name=\"isFolder\"\r\n                        hidden={isFolderFormItemHidden}\r\n                        rules={[{required: true}]}\r\n                    >\r\n                        <Radio.Group defaultValue={0}>\r\n                            <Radio value={0}>非目录</Radio>\r\n                            <Radio value={1}>目录</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"名称\"\r\n                        name=\"name\"\r\n                        rules={[{required: true, message: '请输入名称!' }]}\r\n                    >\r\n                        <Input/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"描述\"\r\n                        name=\"description\"\r\n                        rules={[{required: true, message: '请输入描述!' }]}\r\n                    >\r\n                        <Input.TextArea />\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\nexport {CommonNodeTree};\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\CommonNodeManageLayout.tsx",["297"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {message, Select} from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport {CommonNodeTree} from \"../common/CommonNodeTree\";\r\nimport {ProjectModel} from \"../../entities/ProjectModel\";\r\nimport {AntDataNode} from \"../../entities/AntDataNode\";\r\nimport {DataTypeEnumDescription} from \"../../entities/DataTypeEnumDescription\";\r\nimport {CommonNodeListPage} from \"./CommonNodeListPage\";\r\nimport ShellEdit from \"../autotest/shell/ShellEdit\";\r\nimport {DataTypeEnum} from \"../../entities/DataTypeEnum\";\r\nimport GlobalVariableEdit from \"../autotest/globalvariable/GlobalVariableEdit\";\r\nimport {PlatformApiEdit} from \"../autotest/platformapi/PlatformApiEdit\";\r\nimport HttpApiEdit from \"../autotest/httpapi/HttpApiEdit\";\r\nimport {AutoCaseEditor} from \"../autotest/case-editor/editor/AutoCaseEditor\";\r\nimport {ApiUrlConfig} from \"../../config/api.url\";\r\nimport {AutoPlanEdit} from \"../autotest/autoplan/AutoPlanEdit\";\r\ninterface IProps {}\r\nconst {Option} = Select;\r\ntype CommonNodeListProps = IProps & RouteComponentProps;\r\n\r\n\r\ninterface IState {\r\n    route: any;\r\n    nodeId ?: number|null;\r\n    dataTypeId ?: number|null;\r\n    projectId ?: number|null;\r\n    prevProjectId ?: number|null;\r\n    renderRightFlag: number;\r\n    myProjects: ProjectModel[];\r\n    initTreeData: AntDataNode[];\r\n}\r\nconst initTreeData = [{ title: '自动化用例', key: '1-1' }];\r\n\r\nconst rootTitle = {\r\n    2: DataTypeEnumDescription.APP_API,\r\n    3: DataTypeEnumDescription.AUTO_SHELL,\r\n    4: DataTypeEnumDescription.GLOBAL_VARIABLE,\r\n    5: DataTypeEnumDescription.PLATFORM_API,\r\n    6: DataTypeEnumDescription.AUTO_CASE,\r\n    7: DataTypeEnumDescription.AUTO_PLAN\r\n}\r\n\r\nclass CommonNodeManageLayout extends React.Component<CommonNodeListProps, IState> {\r\n    constructor(props) {\r\n        super(props);\r\n        initTreeData[0].title = rootTitle[props.match.params.dataTypeId];\r\n        this.state = {\r\n            route: props.route,\r\n            dataTypeId: this.props.match.params.dataTypeId,\r\n            prevProjectId: undefined,\r\n            projectId: undefined,\r\n            nodeId: null,\r\n            renderRightFlag: 0,\r\n            myProjects: [],\r\n            initTreeData: initTreeData,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMyProjects();\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (prevState.dataTypeId !== nextProps.match.params.dataTypeId) {\r\n            prevState.initTreeData[0].title = rootTitle[nextProps.match.params.dataTypeId];\r\n            return {\r\n                ...prevState,\r\n                dataTypeId: nextProps.match.params.dataTypeId,\r\n                renderRightFlag: 0,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getMyProjects() {\r\n        axios.get(ApiUrlConfig.GET_MY_PROJECTS_URL).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('获取数据失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    let myProjects :ProjectModel[] = [];\r\n                    if(resp.data.data && resp.data.data.length > 0) {\r\n                        myProjects = resp.data.data;\r\n                    } else {\r\n                        myProjects = [];\r\n                    }\r\n                    this.setState({\r\n                        myProjects: myProjects\r\n                    });\r\n                    if(myProjects.length > 0) {\r\n                        const lastUsedProjectId = window.localStorage.getItem('_LAST_USED_PROJECT_ID');\r\n                        if(lastUsedProjectId) {\r\n                            const lastUsedProjectIdInt = parseInt(lastUsedProjectId);\r\n                            if(lastUsedProjectIdInt && myProjects.filter(v => {return v.id === lastUsedProjectIdInt;}).length > 0) {\r\n                                this.setState({\r\n                                    projectId: lastUsedProjectIdInt\r\n                                });\r\n                            }\r\n                        } else {\r\n                            this.setState({\r\n                                projectId: myProjects[0].id\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getMyProjectOptions() {\r\n        return this.state.myProjects.map(function (v) {\r\n            return <Option key={v.id} value={v.id}>{v.name}</Option>\r\n        });\r\n    }\r\n\r\n    handleProjectChange = (e) => {\r\n        const projectId = this.state.projectId;\r\n        this.setState({\r\n            prevProjectId: projectId,\r\n            projectId: e,\r\n            initTreeData: [{ title: rootTitle[this.state.dataTypeId || 6], key: '1-1' }],\r\n        });\r\n        window.localStorage.setItem(\"_LAST_USED_PROJECT_ID\", e);\r\n    }\r\n\r\n    setRenderRightFlag = (flag: number) => {\r\n        this.setState({\r\n            renderRightFlag: flag\r\n        });\r\n    }\r\n\r\n    setNodeId = (id: number) => {\r\n        this.setState({\r\n            nodeId: id,\r\n        });\r\n    }\r\n\r\n    renderNodeTree() {\r\n        if(this.state.projectId) {\r\n            return <CommonNodeTree setNodeId={this.setNodeId} setRenderRightFlag={this.setRenderRightFlag} initTreeData={this.state.initTreeData} dataTypeId={this.props.match.params.dataTypeId} projectId={this.state.projectId}></CommonNodeTree>\r\n        } else {\r\n            return <span>暂无数据，请加入项目</span>\r\n        }\r\n    }\r\n\r\n    renderRight() {\r\n        if(this.state.projectId && this.state.renderRightFlag === DataTypeEnum.ALL) {\r\n            return <CommonNodeListPage setNodeId={this.setNodeId} setRenderRightFlag={this.setRenderRightFlag} projectId={this.state.projectId} dataTypeId={this.props.match.params.dataTypeId}></CommonNodeListPage>\r\n        }else if(this.state.projectId && this.state.renderRightFlag === DataTypeEnum.AUTO_SHELL) {\r\n            return <ShellEdit setRenderRightFlag={this.setRenderRightFlag} id={this.state.nodeId}></ShellEdit>\r\n        }else if(this.state.projectId && this.state.renderRightFlag === DataTypeEnum.GLOBAL_VARIABLE) {\r\n            return <GlobalVariableEdit setRenderRightFlag={this.setRenderRightFlag} id={this.state.nodeId}></GlobalVariableEdit>\r\n        }else if(this.state.projectId && this.state.renderRightFlag === DataTypeEnum.PLATFORM_API) {\r\n            return <PlatformApiEdit setRenderRightFlag={this.setRenderRightFlag} id={this.state.nodeId}></PlatformApiEdit>\r\n        }else if(this.state.projectId && this.state.renderRightFlag === DataTypeEnum.APP_API) {\r\n            return <HttpApiEdit setRenderRightFlag={this.setRenderRightFlag} id={this.state.nodeId}></HttpApiEdit>\r\n        }else if(this.state.projectId && this.state.renderRightFlag === DataTypeEnum.AUTO_CASE) {\r\n            return <AutoCaseEditor id={this.state.nodeId}></AutoCaseEditor>\r\n        }else if(this.state.projectId && this.state.renderRightFlag === DataTypeEnum.AUTO_PLAN) {\r\n            return <AutoPlanEdit projectId={this.state.projectId} id={this.state.nodeId} setRenderRightFlag={this.setRenderRightFlag}></AutoPlanEdit>\r\n        }else{\r\n            return <span>暂无数据，请加入项目</span>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const route = this.state.route || {children: []};\r\n        return (\r\n        <div className=\"tree-main-div\">\r\n            <div className=\"left-tree-panel\">\r\n                <div className=\"myprojects\">\r\n                    <Select\r\n                        showSearch\r\n                        value={this.state.projectId || undefined}\r\n                        style={{ width: '100%' }}\r\n                        onChange={this.handleProjectChange}\r\n                        placeholder=\"选择你的项目\"\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option !== undefined && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                    >\r\n                        {this.getMyProjectOptions()}\r\n                    </Select>\r\n                </div>\r\n                <div className=\"node-tree-content\">\r\n                {this.state.projectId && this.renderNodeTree()}\r\n                </div>\r\n            </div>\r\n            <div className=\"right-panel\">\r\n                {this.state.projectId && this.renderRight()}\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(CommonNodeManageLayout);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\CommonNodeListPage.tsx",["298"],"import React, {forwardRef, useEffect, useImperativeHandle, useState} from \"react\";\r\nimport {DataTypeEnumDescription} from \"../../entities/DataTypeEnumDescription\";\r\nimport {Button, message, Table, Tag} from \"antd\";\r\nimport {\r\n    CheckCircleOutlined, CheckCircleTwoTone\r\n} from '@ant-design/icons';\r\nimport {Input} from 'antd';\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport {ApiUrlConfig} from \"../../config/api.url\";\r\nimport {DataNodeModel} from \"../../entities/DataNodeModel\";\r\n\r\nconst {Search} = Input;\r\n\r\ninterface IState {\r\n    dataTypeId: number | null,\r\n    projectId: number | null,\r\n    setRenderRightFlag: any,\r\n    setNodeId: any,\r\n    isResourceSelect?: boolean;\r\n    setSelectedResourceIdList?: any;\r\n    ref?: any;\r\n}\r\n\r\nconst rootTitle = {\r\n    2: DataTypeEnumDescription.APP_API,\r\n    3: DataTypeEnumDescription.AUTO_SHELL,\r\n    4: DataTypeEnumDescription.GLOBAL_VARIABLE,\r\n    5: DataTypeEnumDescription.PLATFORM_API,\r\n    6: DataTypeEnumDescription.AUTO_CASE,\r\n    7: DataTypeEnumDescription.AUTO_PLAN\r\n}\r\n\r\nconst rootSubTitle = {\r\n    2: DataTypeEnumDescription.APP_API2,\r\n    3: DataTypeEnumDescription.AUTO_SHELL2,\r\n    4: DataTypeEnumDescription.GLOBAL_VARIABLE2,\r\n    5: DataTypeEnumDescription.PLATFORM_API2,\r\n    6: DataTypeEnumDescription.AUTO_CASE2,\r\n    7: DataTypeEnumDescription.AUTO_PLAN2\r\n}\r\n\r\nconst CommonNodeListPage: React.FC<IState> = forwardRef((props, ref) => {\r\n    const {setRenderRightFlag} = props;\r\n    const {setSelectedResourceIdList} = props;\r\n    const {setNodeId} = props;\r\n    const [projectId, setProjectId] = useState(props.projectId);\r\n    const [dataTypeId, setDataTypeId] = useState(props.dataTypeId);\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [totalSelect, setTotalSelect] = useState<number>(0);\r\n    const [selectedIdList, setSelectedList] = useState<number[]>([]);\r\n    const [pagination, setPagination] = useState({\r\n        current: 1,\r\n        pageNum: 1,\r\n        pageSize: 10,\r\n        linkOperator: 'or',\r\n        total: 0,\r\n        filterConditionList: []\r\n    });\r\n    const title = (props.dataTypeId && rootTitle[props.dataTypeId]) || '';\r\n    const subtitle = (props.dataTypeId && rootSubTitle[props.dataTypeId]) || '';\r\n\r\n    let defaultShowColumn;\r\n    if (props.isResourceSelect) {\r\n        defaultShowColumn = ['description', 'addUser', 'addTime'];\r\n    } else {\r\n        defaultShowColumn = ['description', 'addUser', 'addTime', 'lastModifyUser', 'lastModifyTime'];\r\n    }\r\n    const [showColumnValue, setShowColumnValue] = useState<any>(defaultShowColumn);\r\n\r\n    if (projectId !== props.projectId) {\r\n        setProjectId(props.projectId);\r\n    }\r\n    if (dataTypeId !== props.dataTypeId) {\r\n        setDataTypeId(props.dataTypeId);\r\n    }\r\n    if (projectId !== props.projectId || dataTypeId !== props.dataTypeId) {\r\n        setData([]);\r\n    }\r\n    useEffect(() => {\r\n        loadDataList(true);\r\n    }, [projectId, dataTypeId]);\r\n    useImperativeHandle(ref, () => ({\r\n        setSelectedList: setSelectedList,\r\n        setTotalSelect: setTotalSelect,\r\n    }));\r\n\r\n    function edit(id: number) {\r\n        if (!setRenderRightFlag) {\r\n            return;\r\n        }\r\n        setRenderRightFlag(Number(dataTypeId));\r\n        setNodeId(id);\r\n    }\r\n\r\n    function remove(id: number) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm('确定删除吗?')) {\r\n            return;\r\n        }\r\n        axios.post(ApiUrlConfig.DELETE_NODE_URL,\r\n            {dataTypeId: dataTypeId, projectId: projectId, id: id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('操作失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                    loadDataList(false);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function onSearch(value) {\r\n        let filterConditionList =\r\n            [\r\n                {\"columnName\": \"name\", \"value\": value},\r\n                {\"columnName\": \"id\", \"operator\": \"=\", \"value\": value}];\r\n        if (!value) {\r\n            filterConditionList = [];\r\n        }\r\n        _onSearch(filterConditionList);\r\n    }\r\n\r\n    function onChange(pageCondition, filters) {\r\n        const keys = Object.keys(filters);\r\n        setShowColumnValue(filters[keys[0]] || []);\r\n        loadDataList(false, pageCondition);\r\n    }\r\n\r\n    function _onSearch(filterConditionList) {\r\n        const pageCondition = {\r\n            ...pagination,\r\n            pageNum: pagination.current,\r\n            pageSize: pagination.pageSize,\r\n            current: pagination.current,\r\n            linkOperator: pagination.linkOperator,\r\n            filterConditionList: filterConditionList\r\n        };\r\n        setPagination(pageCondition)\r\n        loadDataList(true, pageCondition);\r\n    }\r\n\r\n    function selectResource(record: DataNodeModel) {\r\n        if (selectedIdList.indexOf(record.id) < 0) {\r\n            selectedIdList.push(record.id);\r\n        } else {\r\n            selectedIdList.splice(selectedIdList.indexOf(record.id), 1);\r\n        }\r\n        setSelectedResourceIdList(selectedIdList);\r\n        setSelectedList(selectedIdList);\r\n        setTotalSelect(selectedIdList.length);\r\n    }\r\n\r\n    function loadDataList(reset ?: boolean, pageCondition?: any) {\r\n        let page = pagination;\r\n        if (pageCondition) {\r\n            page = pageCondition;\r\n        }\r\n        if (reset) {\r\n            page.current = 1;\r\n        }\r\n        setLoading(true);\r\n        const data = {\r\n            pageNum: page.current,\r\n            pageSize: page.pageSize,\r\n            dataTypeId: dataTypeId,\r\n            projectId: projectId,\r\n            linkOperator: page.linkOperator,\r\n            filterConditionList: page.filterConditionList\r\n        };\r\n        axios.post(ApiUrlConfig.QUERY_NODE_LIST_URL, data).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载列表失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    ret.data.rows.map(v => {\r\n                        v.key = v.id;\r\n                        if (v.addTime) {\r\n                            v.addTime = moment(new Date(v.addTime)).format('YYYY-MM-DD HH:mm:ss');\r\n                        }\r\n                        if (v.lastModifyTime) {\r\n                            v.lastModifyTime = moment(new Date(v.lastModifyTime)).format('YYYY-MM-DD HH:mm:ss');\r\n                        }\r\n\r\n                        return null;\r\n                    });\r\n                    setData(ret.data.rows);\r\n                    setPagination({\r\n                        ...page,\r\n                        total: ret.data.total\r\n                    });\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            setLoading(false);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    function renderSelectTag(record: DataNodeModel) {\r\n        let selectTag;\r\n        if (selectedIdList.indexOf(record.id) > -1) {\r\n            selectTag = <CheckCircleTwoTone twoToneColor=\"#52c41a\"/>\r\n        }\r\n        return selectTag;\r\n    }\r\n\r\n    let operateColumn;\r\n    if (!props.isResourceSelect) {\r\n        operateColumn = function (text, record) {\r\n            return (\r\n                <div>\r\n                    <Button className=\"padding-left0\" size=\"small\" type=\"link\"\r\n                            onClick={() => edit(record.id)}>修改</Button>\r\n                    <Button danger size=\"small\" type=\"link\" onClick={() => remove(record.id)}>删除</Button>\r\n                </div>\r\n            )\r\n        }\r\n    } else {\r\n        operateColumn = function (text, record) {\r\n            return (\r\n                <div>\r\n                    <Button className=\"padding-left0\" size=\"small\" type=\"link\"\r\n                            onClick={() => selectResource(record)}>选择</Button>\r\n                    {renderSelectTag(record)}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    const descriptionColumnJson = {\r\n        title: '描述',\r\n        dataIndex: 'description',\r\n        ellipsis: true,\r\n        render: text => <span>{text}</span>,\r\n    };\r\n    const addUserColumnJson = {\r\n        title: '创建者',\r\n        dataIndex: 'addUser',\r\n        render: text => <span>{text}</span>,\r\n    };\r\n    const addTimeColumnJson = {\r\n        title: '创建时间',\r\n        dataIndex: 'addTime',\r\n        render: text => <span>{text}</span>,\r\n    };\r\n    const lastModifyUserColumnJson = {\r\n        title: '修改者',\r\n        dataIndex: 'lastModifyUser',\r\n        render: text => <span>{text}</span>,\r\n    };\r\n    const lastModifyTimeColumnJson = {\r\n        title: '修改时间',\r\n        dataIndex: 'lastModifyTime',\r\n        render: text => <span>{text}</span>,\r\n    };\r\n    const operateColumnJson = {\r\n        title: '操作',\r\n        render: operateColumn,\r\n        filteredValue: showColumnValue,\r\n        filters: [\r\n            {\r\n                text: '描述',\r\n                value: 'description',\r\n            }, {\r\n                text: '创建者',\r\n                value: 'addUser',\r\n            }, {\r\n                text: '创建时间',\r\n                value: 'addTime',\r\n            }, {\r\n                text: '修改者',\r\n                value: 'lastModifyUser',\r\n            }, {\r\n                text: '修改时间',\r\n                value: 'lastModifyTime',\r\n            },\r\n        ],\r\n    };\r\n\r\n    const columns: any[] = [\r\n        {\r\n            title: 'ID',\r\n            dataIndex: 'id',\r\n            render: (text, record) => <span><a onClick={() => edit(record.id)}>{text}</a></span>,\r\n        }, {\r\n            title: '名称',\r\n            dataIndex: 'name',\r\n            ellipsis: true,\r\n            render: text => <span>{text}</span>,\r\n        },\r\n    ];\r\n    if (showColumnValue.indexOf('description') > -1) {\r\n        columns.push(descriptionColumnJson);\r\n    }\r\n    if (showColumnValue.indexOf('addUser') > -1) {\r\n        columns.push(addUserColumnJson);\r\n    }\r\n    if (showColumnValue.indexOf('addTime') > -1) {\r\n        columns.push(addTimeColumnJson);\r\n    }\r\n    if (showColumnValue.indexOf('lastModifyUser') > -1) {\r\n        columns.push(lastModifyUserColumnJson);\r\n    }\r\n    if (showColumnValue.indexOf('lastModifyTime') > -1) {\r\n        columns.push(lastModifyTimeColumnJson);\r\n    }\r\n\r\n    columns.push(operateColumnJson);\r\n\r\n    let cardHeader;\r\n    let countTag;\r\n    if (!props.isResourceSelect) {\r\n        cardHeader =\r\n            <div className=\"card-header card-header-divider\">{title}<span className=\"card-subtitle\">{subtitle}</span>\r\n            </div>;\r\n    } else {\r\n        countTag = <Tag icon={<CheckCircleOutlined/>} color=\"success\">\r\n            选择了 {totalSelect} 项\r\n        </Tag>\r\n    }\r\n    return (<div className=\"card\">\r\n        {cardHeader}\r\n        <div className=\"card-body\">\r\n            <div className=\"list-toolbar\">\r\n                <Search placeholder=\"Id或者名称\" onSearch={onSearch} enterButton style={{width: 400,}}/>\r\n                {countTag}\r\n            </div>\r\n            <Table columns={columns}\r\n                   dataSource={data}\r\n                   size=\"small\"\r\n                   footer={() => '共' + pagination.total + '条数据'}\r\n                   loading={loading}\r\n                   pagination={pagination}\r\n                   onChange={onChange}\r\n            />\r\n        </div>\r\n    </div>)\r\n})\r\n\r\n\r\nexport {CommonNodeListPage};\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\shell\\ShellEdit.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\globalvariable\\GlobalVariableEdit.tsx",["299"],"import React from \"react\";\r\nimport {FormInstance} from \"antd/lib/form\";\r\nimport axios from \"axios\";\r\nimport {Form, Input, Button, Select, Tooltip, message, Radio} from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\n\r\ninterface IProps {}\r\n\r\ninterface GlobalVariableModel {\r\n    name: string;\r\n    description: string;\r\n    modifyFlag: number;\r\n}\r\n\r\ntype GlobalVariableProps = IProps & RouteComponentProps;\r\ninterface IState {\r\n    id: number;\r\n    ref: any;\r\n    saving: boolean;\r\n    initialValues: GlobalVariableModel;\r\n    setRenderRightFlag: any;\r\n    load: any;\r\n}\r\n\r\nconst layout = {\r\n    labelCol: { span: 6 },\r\n    wrapperCol: { span: 18 },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nclass GlobalVariableEdit extends React.Component<GlobalVariableProps, IState> {\r\n    constructor(props) {\r\n        super(props);\r\n        const ref = React.createRef<FormInstance>();\r\n        this.state = {\r\n            id: props.id,\r\n            load: this.load,\r\n            setRenderRightFlag: props.setRenderRightFlag,\r\n            ref: ref,\r\n            saving: false,\r\n            initialValues: {\r\n                name: '',\r\n                description: '',\r\n                modifyFlag: 1,\r\n            }\r\n        }\r\n    }\r\n\r\n    load = (id: any) => {\r\n        axios.post(ApiUrlConfig.LOAD_GLOBAL_VARIABLE_URL, {id: id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载脚本失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    if (!ret.data) {\r\n                        return;\r\n                    }\r\n                    this.state.ref.current.setFieldsValue({\r\n                        name: ret.data.name,\r\n                        description: ret.data.description,\r\n                        modifyFlag: ret.data.modifyFlag,\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (prevState.id !== nextProps.id) {\r\n            prevState.load(nextProps.id);\r\n            return {\r\n                ...prevState,\r\n                id: nextProps.id,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    back() {\r\n        this.state.setRenderRightFlag(0);\r\n    }\r\n\r\n    onFinish = values => {\r\n        if(this.state.id > 0) {\r\n            values['id'] = this.state.id;\r\n        }\r\n        this.setState({saving: true});\r\n        axios.post(ApiUrlConfig.SAVE_GLOBAL_VARIABLE_URL, values).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('保存失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            this.setState({saving: false});\r\n        });\r\n    }\r\n\r\n    onFinishFailed = errorInfo => {\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.load(this.state.id);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"card stretch-left\">\r\n            <div className=\"card-header card-header-divider\">\r\n                编辑全局变量\r\n                <Tooltip title=\"返回\">\r\n                    <Button onClick={() => this.back()} type=\"primary\" size=\"small\" shape=\"circle\" icon={<ArrowLeftOutlined />} />\r\n                </Tooltip>\r\n                <span className=\"card-subtitle\">所有用例可以使用</span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <Form\r\n                    className=\"\"\r\n                    {...layout}\r\n                    name=\"shell\"\r\n                    ref={this.state.ref}\r\n                    initialValues={this.state.initialValues}\r\n                    onFinish={this.onFinish}\r\n                    onFinishFailed={this.onFinishFailed}\r\n                >\r\n                    <Form.Item\r\n                        label=\"名称\"\r\n                        name=\"name\"\r\n                        rules={[{required: true, message: '请输入名称!'}]}\r\n                    >\r\n                        <Input/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"描述\"\r\n                        name=\"description\"\r\n                        rules={[{required: false, message: '请输入描述!'}]}\r\n                    >\r\n                        <Input.TextArea rows={4} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"是否运行在用例中修改\"\r\n                        name=\"modifyFlag\"\r\n                        rules={[{required: true, message: '是否运行在用例中修改'}]}\r\n                    >\r\n                        <Radio.Group>\r\n                            <Radio value={1}>是</Radio>\r\n                            <Radio value={0}>否</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={this.state.saving}>\r\n                            保存\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withRouter(GlobalVariableEdit);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\entities\\DataTypeEnumDescription.ts",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\platformapi\\PlatformApiEdit.tsx",["300"],"import React, {useState, useCallback, useRef, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport {Form, Input, Button, Select, Tooltip, message, Table, Space } from 'antd';\r\nimport { ArrowLeftOutlined,PlusOutlined,CloseOutlined } from '@ant-design/icons';\r\nimport {ParameterDefineRow} from \"../../../entities/ParameterDefineRow\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport update from 'immutability-helper';\r\nimport {DataTypeEnum} from \"../../../entities/DataTypeEnum\";\r\nimport {RandomUtils} from \"../../../utils/RandomUtils\";\r\n\r\nconst { Option } = Select;\r\ninterface IState {\r\n    id: number|null|undefined;\r\n    setRenderRightFlag: any;\r\n}\r\n\r\nconst layout = {\r\n    labelCol: { span: 6 },\r\n    wrapperCol: { span: 18 },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\n\r\nconst type = 'DraggableBodyRow';\r\n\r\nconst DraggableBodyRow = ({ index, moveRow, className, style, ...restProps }) => {\r\n    const ref: any = useRef();\r\n    const [{ isOver, dropClassName }, drop] = useDrop({\r\n        accept: type,\r\n        collect: monitor => {\r\n            const { index: dragIndex }: any = monitor.getItem() || {};\r\n            if (dragIndex === index) {\r\n                return {};\r\n            }\r\n            return {\r\n                isOver: monitor.isOver(),\r\n                dropClassName: dragIndex < index ? ' drop-over-downward' : ' drop-over-upward',\r\n            };\r\n        },\r\n        drop: (item: any) => {\r\n            moveRow(item.index, index);\r\n        },\r\n    });\r\n    const [, drag] = useDrag({\r\n        type,\r\n        item: { index },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n    drop(drag(ref));\r\n\r\n    return (\r\n        <tr\r\n            ref={ref}\r\n            className={`${className}${isOver ? dropClassName : ''}`}\r\n            style={{ cursor: 'move', ...style }}\r\n            {...restProps}\r\n        />\r\n    );\r\n};\r\nconst initialValues = {\r\n    name: '',\r\n    description: '',\r\n};\r\n\r\nconst PlatformApiEdit: React.FC<IState> = (props) => {\r\n    const [id, setId] = useState(props.id);\r\n    const [rows, setRows] = useState<ParameterDefineRow[]>([]);\r\n    const [saving, setSaving] = useState(false);\r\n    const [form] = Form.useForm();\r\n    if(id !== props.id) {\r\n        setId(props.id);\r\n    }\r\n    useEffect(() => {\r\n        load();\r\n    }, [id]);\r\n\r\n    function load() {\r\n        axios.post(ApiUrlConfig.LOAD_PLATFORM_API_URL, {id: id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    if (!ret.data) {\r\n                        return;\r\n                    }\r\n                    let rows: ParameterDefineRow[] = [];\r\n                    if(ret.data.rows) {\r\n                        rows = ret.data.rows || [];\r\n                    }else{\r\n                        rows = [];\r\n                    }\r\n                    if(rows.length < 1) {\r\n                        rows.push({name: '', description: '', inout: '1', type: '1', defaultValue: ''});\r\n                    }\r\n                    for (let i = 0; i < rows.length; i++) {\r\n                        rows[i]['key'] = RandomUtils.getKey();\r\n                    }\r\n                    if(form) {\r\n                        form.setFieldsValue({\r\n                            name: ret.data.name,\r\n                            description: ret.data.description,\r\n                        });\r\n                    }\r\n                    setRows(rows);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function back() {\r\n        props.setRenderRightFlag(DataTypeEnum.ALL);\r\n    }\r\n\r\n    function onFinish(values) {\r\n        if (id && id > 0) {\r\n            values['id'] = id;\r\n        }\r\n        values['defineJson'] = JSON.stringify(rows);\r\n        if(rows.length === 0 || rows[0].name === '') {\r\n            values['defineJson'] = '';\r\n        }\r\n        setSaving(true);\r\n        axios.post(ApiUrlConfig.SAVE_PLATFORM_API_URL, values).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('保存失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            setSaving(false);\r\n        });\r\n    }\r\n\r\n    function onFinishFailed() {\r\n\r\n    };\r\n\r\n    function addRow(index) {\r\n        const row = {name: '', description: '', inout: '1', type: '1', defaultValue: ''};\r\n        row['key'] = RandomUtils.getKey();\r\n        rows.splice(index+1, 0, row);\r\n        setRows([...rows]);\r\n    }\r\n\r\n    function deleteRow(index) {\r\n        if(rows.length < 2) {\r\n            return;\r\n        }\r\n        rows.splice(index, 1);\r\n        setRows([...rows]);\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: '参数名称',\r\n            dataIndex: 'name',\r\n            width: '210px',\r\n            render: (text, record) => <Input defaultValue={record.name} onChange={(e)=>{record.name=e.target.value;}}/>,\r\n        },\r\n        {\r\n            title: '描述',\r\n            dataIndex: 'description',\r\n            render: (text, record) => <Input defaultValue={record.description} onChange={(e)=>{record.description=e.target.value;}}/>,\r\n        },\r\n        {\r\n            title: '类型',\r\n            width: '110px',\r\n            dataIndex: 'type',\r\n            render: (text, record) => <Select defaultValue={record.type} style={{ width: 100 }} onChange={(value)=>{record.type=value;}}>\r\n                <Option value=\"1\" key={1}>字符串</Option>\r\n                <Option value=\"2\" key={2}>数字</Option>\r\n                <Option value=\"3\" key={3}>布尔型</Option>\r\n            </Select>,\r\n        },\r\n        {\r\n            title: '输入输出',\r\n            width: '110px',\r\n            dataIndex: 'inout',\r\n            render: (text, record) => <Select defaultValue={record.inout} style={{ width: 100 }} onChange={(value)=>{record.inout=value;}}>\r\n                <Option value=\"1\" key={1}>输入参数</Option>\r\n                <Option value=\"2\" key={2}>输出参数</Option>\r\n            </Select>,\r\n        },\r\n        {\r\n            title: '默认值',\r\n            width: '200px',\r\n            dataIndex: 'defaultValue',\r\n            render: (text, record) => <Input defaultValue={record.defaultValue} onChange={(e)=>{record.description=e.target.value;}}/>,\r\n        },\r\n        {\r\n            title: '操作',\r\n            key: 'action',\r\n            render: (text, record, index) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {addRow(index);}}><PlusOutlined /></a>\r\n                    <a onClick={() => {deleteRow(index);}}><CloseOutlined /></a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const components = {\r\n        body: {\r\n            row: DraggableBodyRow,\r\n        },\r\n    };\r\n\r\n    const moveRow = useCallback(\r\n        (dragIndex, hoverIndex) => {\r\n            const dragRow = rows[dragIndex];\r\n            setRows(\r\n                update(rows, {\r\n                    $splice: [\r\n                        [dragIndex, 1],\r\n                        [hoverIndex, 0, dragRow],\r\n                    ],\r\n                }),\r\n            );\r\n        },\r\n        [rows],\r\n    );\r\n\r\n    return (<div className=\"card stretch-left\">\r\n        <div className=\"card-header card-header-divider\">\r\n            编辑平台API\r\n            <Tooltip title=\"返回\">\r\n                <Button onClick={() => back()} type=\"primary\" size=\"small\" shape=\"circle\"\r\n                        icon={<ArrowLeftOutlined/>}/>\r\n            </Tooltip>\r\n            <span className=\"card-subtitle\">自动化测试平台内置提供的方法</span>\r\n        </div>\r\n        <div className=\"card-body\">\r\n            <Form\r\n                className=\"\"\r\n                {...layout}\r\n                name=\"shell\"\r\n                form={form}\r\n                initialValues={initialValues}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n            >\r\n                <Form.Item\r\n                    label=\"名称\"\r\n                    name=\"name\"\r\n                    rules={[{required: true, message: '请输入名称!'}]}\r\n                >\r\n                    <Input/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"描述\"\r\n                    name=\"description\"\r\n                    rules={[{required: false, message: '请输入描述!'}]}\r\n                >\r\n                    <Input.TextArea rows={4} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"参数配置\"\r\n                    name=\"parameter\"\r\n                    rules={[{required: false}]}\r\n                >\r\n                    <DndProvider backend={HTML5Backend}>\r\n                        <Table\r\n                            columns={columns}\r\n                            dataSource={rows}\r\n                            bordered\r\n                            pagination={{ defaultPageSize: 100 }}\r\n                            components={components}\r\n                            onRow={(record, index) => ({\r\n                                index,\r\n                                moveRow,\r\n                            }) as any}\r\n                            size=\"small\"\r\n                        />\r\n                    </DndProvider>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    <div className=\"fixed-bottom\">\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={saving} style={{left: '70%'}}>\r\n                            保存\r\n                        </Button>\r\n                    </div>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport {PlatformApiEdit};\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\entities\\DataTypeEnum.ts",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\CommonTableShow.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\config\\api.url.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\httpapi\\HttpApiEdit.tsx",["301","302"],"import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport {Form, Input, Button, Tooltip, Select, Radio, message} from \"antd\";\r\nimport {ArrowLeftOutlined} from \"@ant-design/icons\";\r\nimport {FormInstance} from \"antd/lib/form\";\r\nimport { Tabs } from 'antd';\r\nimport MonacoEditor from 'react-monaco-editor';\r\n\r\n// 引入编辑器组件\r\nimport BraftEditor from 'braft-editor'\r\n// 引入编辑器样式\r\nimport 'braft-editor/dist/index.css'\r\n\r\n\r\nimport { Collapse } from 'antd';\r\nimport { CaretRightOutlined } from '@ant-design/icons';\r\nimport { JsonDefineEditor } from \"./JsonDefineEditor\";\r\nimport {FormEditor} from \"./FormEditor\";\r\nimport {HttpApiPreview} from \"./HttpApiPreview\";\r\nimport {HttpApiModel} from \"../../../entities/HttpApiModel\";\r\nimport axios from \"axios\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\nimport {RandomUtils} from \"../../../utils/RandomUtils\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\n\r\n\r\ninterface IProps {}\r\ntype AppApiProps = IProps & RouteComponentProps;\r\n\r\ninterface IState {\r\n    appApi: HttpApiModel,\r\n    remarkBraft: any,\r\n    inputType: string;\r\n    ref: any;\r\n    saving: boolean\r\n    setRenderRightFlag: any;\r\n    load: any;\r\n\r\n    initialValues: any;\r\n}\r\nconst layout = {\r\n    labelCol: { span: 6 },\r\n    wrapperCol: { span: 18 },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nclass HttpApiEdit extends React.Component<AppApiProps, IState> {\r\n    constructor(props) {\r\n        super(props);\r\n        const ref = React.createRef<FormInstance>();\r\n        this.state = {\r\n            appApi: {\r\n                id: props.id,\r\n                method: '2',\r\n                reqBodyOther: '{\"type\":\"object\", \"name\": \"root\", \"title\": \"\", \"description\": \"\", \"properties\":{}}',\r\n                reqDefineRows: [],\r\n                reqBodyForm: [],\r\n                reqBodyKv: [],\r\n                reqParams: [],\r\n                reqHeaders: [],\r\n                resBody: '{\"type\":\"object\", \"name\": \"root\", \"title\": \"\", \"description\": \"\", \"properties\":{}}',\r\n                resBodyType: '1',\r\n                resDefineRows: [],\r\n                reqBodyMessage: '',\r\n                resBodyMessage: '',\r\n                reqBodyType: '3',\r\n                remark: '',\r\n                name: '',\r\n                description: '',\r\n                url: '',\r\n            },\r\n            remarkBraft: BraftEditor.createEditorState(null),\r\n            inputType: '1',\r\n            load: this.load,\r\n            setRenderRightFlag: props.setRenderRightFlag,\r\n            ref: ref,\r\n            saving: false,\r\n\r\n            initialValues: {\r\n                name: '',\r\n                url: '',\r\n                description: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    getArrayFromString = (json: string) => {\r\n        try {\r\n            const array = JSON.parse(json) || [];\r\n            return array;\r\n        } catch (e) {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    load = (id: any) => {\r\n        if(!id) {\r\n            return ;\r\n        }\r\n        axios.post(ApiUrlConfig.LOAD_APP_API_URL, {id: id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载接口信息失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                    return;\r\n                }\r\n                const appApi: HttpApiModel = ret.data;\r\n                appApi.method = appApi.method + '';\r\n                appApi.reqBodyType = appApi.reqBodyType + '';\r\n                appApi.resBodyType = appApi.resBodyType + '';\r\n                appApi.reqBodyOther = appApi.reqBodyOther || '{\"type\":\"object\", \"name\": \"root\", \"title\": \"\", \"description\": \"\", \"properties\":{}}';\r\n                appApi.resBody = appApi.resBody || '{\"type\":\"object\", \"name\": \"root\", \"title\": \"\", \"description\": \"\", \"properties\":{}}';\r\n                appApi.reqBodyForm = this.getArrayFromString(ret.data.reqBodyForm);\r\n                appApi.reqParams = this.getArrayFromString(ret.data.reqParams);\r\n                appApi.reqHeaders = this.getArrayFromString(ret.data.reqHeaders);\r\n                appApi.reqBodyKv = this.getArrayFromString(ret.data.reqBodyKv);\r\n\r\n                const reqDefineRows = this.changeDefineToRows(appApi.reqBodyOther);\r\n                const resDefineRows = this.changeDefineToRows(appApi.resBody);\r\n                appApi.reqDefineRows = reqDefineRows;\r\n                appApi.resDefineRows = resDefineRows;\r\n                this.setState({\r\n                    appApi: appApi,\r\n                    remarkBraft: BraftEditor.createEditorState(appApi.remark),\r\n                    initialValues: {\r\n                        name: appApi.name,\r\n                        description: appApi.description,\r\n                        url: appApi.url,\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    changeDefineToRows(defineJson: any): any[] {\r\n        if(!defineJson) {\r\n            return [];\r\n        }\r\n        try {\r\n            defineJson = JSON.parse(defineJson);\r\n        } catch (e) {\r\n            return [];\r\n        }\r\n        const defineRows: any[] = [];\r\n        defineRows.push({name: 'root', level: 0, paddingLeft: '0px', key: RandomUtils.getKey(), title: defineJson.title,\r\n            description: defineJson.description,\r\n            disabled: true, children: [], define: defineJson, expanded: true, type: defineJson.type,\r\n            displayChild: 'block',\r\n            required: false});\r\n        this.transferDefineJsonToRows(defineRows[0], defineJson.required||[]);\r\n        return defineRows;\r\n    }\r\n\r\n    transferDefineJsonToRows(currRow: any, required: string[]) {\r\n        if(currRow.define.properties) {\r\n            for(const key in currRow.define.properties) {\r\n                const childRow = {name: key, level: (currRow.level+1), paddingLeft: '0px', key: RandomUtils.getKey(),\r\n                    disabled: false, children: [], define: currRow.define.properties[key], expanded: true,\r\n                    displayChild: 'block', title: currRow.define.properties[key].title,\r\n                    description: currRow.define.properties[key].description,\r\n                    required: required.indexOf(key) > -1};\r\n                childRow.paddingLeft = childRow.level * 10 + 'px';\r\n                currRow.children.push(childRow);\r\n                this.transferDefineJsonToRows(childRow, currRow.define.properties[key].required || []);\r\n            }\r\n        }\r\n        if(currRow.define.items) {\r\n            const childRow = {name: 'Items', paddingLeft: '0px', expanded: true,\r\n                disabled: true, level: (currRow.level+1), title: '', description: '',\r\n                displayChild: 'block', key: RandomUtils.getKey(),\r\n                children: [], define: currRow.define.items,\r\n                required: false\r\n            }\r\n            childRow.paddingLeft = childRow.level * 10 + 'px';\r\n            currRow.children.push(childRow);\r\n            this.transferDefineJsonToRows(childRow, currRow.define.items.required || []);\r\n        }\r\n    }\r\n\r\n    changeRowsToDefineJson(defineRows: any[]) {\r\n        const root = defineRows[0];\r\n        const defineJson = {type:\"object\", name: 'root', title: root.title,\r\n            description: root.description, required: [], properties:{}};\r\n        if(!defineRows || defineRows.length < 1) {\r\n            return defineJson;\r\n        }\r\n\r\n        defineJson.type = root.type;\r\n        defineJson.title = root.title;\r\n        defineJson.description = root.description;\r\n        if(root.children && root.children.length > 0) {\r\n            this.transferRowsToDefineJson(root.children, defineJson);\r\n        }\r\n        return defineJson;\r\n    }\r\n\r\n    transferRowsToDefineJson(rows: any[], defineJson: any) {\r\n        for (let i = 0; i < rows.length; i++) {\r\n            const define = {type: rows[i].define.type, name: rows[i].name, title: rows[i].title,\r\n                description: rows[i].description};\r\n            if(defineJson.type === 'object') {\r\n                defineJson.properties[define.name] = define;\r\n            }else if(defineJson.type === 'array') {\r\n                defineJson.items = define;\r\n                defineJson.items['required'] = [];\r\n            }\r\n            if(rows[i].required) {\r\n                if(defineJson.required) {\r\n                    defineJson.required.push(rows[i].name);\r\n                }else if(defineJson.items && defineJson.items.required) {\r\n                    defineJson.items.required.push(rows[i].name);\r\n                }\r\n            }\r\n            if(rows[i].children && rows[i].children.length > 0) {\r\n                if(define.type === 'object') {\r\n                    define['required'] = [];\r\n                    define['properties'] = {};\r\n                }else if(define.type === 'array') {\r\n                    define['items'] = {};\r\n                }\r\n                this.transferRowsToDefineJson(rows[i].children, define);\r\n            }\r\n        }\r\n    }\r\n\r\n    changeRowsToJsonMessage = (defineRows: any[]) => {\r\n        const root = defineRows[0];\r\n        const jsonMessage = {};\r\n        if(!defineRows || defineRows.length < 1) {\r\n            return jsonMessage;\r\n        }\r\n        if(root.children && root.children.length > 0) {\r\n            this.transferRowsToJsonMessage(root, jsonMessage);\r\n        }\r\n        return jsonMessage;\r\n    }\r\n\r\n    transferRowsToJsonMessage = (root: any, jsonMessage: any) => {\r\n        const rows = root.children || [];\r\n        for (let i = 0; i < rows.length; i++) {\r\n            if(rows[i].define.type === 'string' && root.define.type !== 'array') {\r\n                jsonMessage[rows[i].name] = \"\";\r\n            }else if(rows[i].define.type === 'string' && root.define.type === 'array') {\r\n                jsonMessage.push(\"\");\r\n            }else if(rows[i].define.type === 'integer' && root.define.type !== 'array') {\r\n                jsonMessage[rows[i].name] = 1;\r\n            }else if(rows[i].define.type === 'integer' && root.define.type === 'array') {\r\n                jsonMessage.push(1);\r\n            }else if(rows[i].define.type === 'boolean' && root.define.type !== 'array') {\r\n                jsonMessage[rows[i].name] = true;\r\n            }else if(rows[i].define.type === 'boolean' && root.define.type === 'array') {\r\n                jsonMessage.push(true);\r\n            }else if(rows[i].define.type === 'number' && root.define.type !== 'array') {\r\n                jsonMessage[rows[i].name] = 3.14;\r\n            }else if(rows[i].define.type === 'number' && root.define.type === 'array') {\r\n                jsonMessage.push(3.14);\r\n            }else if(rows[i].define.type === 'object' && root.define.type !== 'array') {\r\n                jsonMessage[rows[i].name] = {};\r\n            }else if(rows[i].define.type === 'object' && root.define.type === 'array') {\r\n                jsonMessage.push({});\r\n            }else if(rows[i].define.type === 'array') {\r\n                jsonMessage[rows[i].name] = [];\r\n            }\r\n            if(rows[i].children && rows[i].children.length > 0 && root.define.type !== 'array') {\r\n                this.transferRowsToJsonMessage(rows[i], jsonMessage[rows[i].name]);\r\n            }else if(rows[i].children && rows[i].children.length > 0 && root.define.type === 'array') {\r\n                this.transferRowsToJsonMessage(rows[i], jsonMessage[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (prevState.id !== nextProps.id) {\r\n            prevState.load(nextProps.id);\r\n            return {\r\n                ...prevState,\r\n                id: nextProps.id,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    back() {\r\n        this.state.setRenderRightFlag(0);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.load(this.state.appApi.id);\r\n    }\r\n\r\n    onChangeReqBodyType = (e: any) => {\r\n        this.setState({\r\n            appApi: {\r\n                ...this.state.appApi,\r\n                reqBodyType: e.target.value,\r\n            }\r\n        });\r\n    }\r\n\r\n    onChangeInputType = (e: any) => {\r\n        this.setState({\r\n            inputType: e.target.value,\r\n        });\r\n    }\r\n\r\n    renderEditor() {\r\n        if(this.state.appApi.reqBodyType === '1') {\r\n            return (<FormEditor key=\"1\" defineRows={this.state.appApi.reqBodyForm} type=\"1\"></FormEditor>)\r\n        }\r\n        if(this.state.appApi.reqBodyType === '2') {\r\n            return (<FormEditor key=\"2\" defineRows={this.state.appApi.reqBodyKv} type=\"2\"></FormEditor>)\r\n        }\r\n        if(this.state.appApi.reqBodyType === '3') {\r\n            return (<JsonDefineEditor key=\"3\" id={this.state.appApi.id} defineRows={this.state.appApi.reqDefineRows}></JsonDefineEditor>)\r\n        }\r\n    }\r\n\r\n    renderReqInputArea() {\r\n        if(this.state.inputType === '1') {\r\n            return (<div>\r\n                <div style={{marginTop: '10px'}}>\r\n                    <Radio.Group value={this.state.appApi.reqBodyType} onChange={this.onChangeReqBodyType}>\r\n                        <Radio key=\"1\" value=\"1\">form-data</Radio>\r\n                        <Radio key=\"2\" value=\"2\">x-www-from-urlencoded</Radio>\r\n                        <Radio key=\"3\" value=\"3\">json</Radio>\r\n                    </Radio.Group>\r\n                </div>\r\n\r\n                <div className=\"api-define-div\">\r\n                 {this.renderEditor()}\r\n                </div>\r\n            </div>)\r\n        }\r\n        if(this.state.inputType === '2') {\r\n            return (<FormEditor key={4} defineRows={this.state.appApi.reqParams} type=\"3\"></FormEditor>)\r\n        }\r\n        if(this.state.inputType === '3') {\r\n            return (<FormEditor key={5} defineRows={this.state.appApi.reqHeaders} type=\"4\"></FormEditor>)\r\n        }\r\n    }\r\n\r\n    handleEditorChange = (remark) => {\r\n        this.setState({\r\n            remarkBraft: remark,\r\n        });\r\n    }\r\n\r\n    filterEmptyNameItem = (rows: any[]) => {\r\n        return rows.filter(value => {\r\n            if(value.name.trim() !== '') {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n\r\n    onSave = () => {\r\n        const values = this.state.ref.current.getFieldsValue();\r\n        values.id = this.state.appApi.id;\r\n        values.name = this.state.appApi.name;\r\n        values.description = this.state.appApi.description;\r\n        values.reqHeaders = JSON.stringify(this.filterEmptyNameItem(this.state.appApi.reqHeaders));\r\n        values.reqParams = JSON.stringify(this.filterEmptyNameItem(this.state.appApi.reqParams));\r\n        values.reqBodyKv = JSON.stringify(this.filterEmptyNameItem(this.state.appApi.reqBodyKv));\r\n        values.reqBodyForm = JSON.stringify(this.filterEmptyNameItem(this.state.appApi.reqBodyForm));\r\n        values.reqBodyType = this.state.appApi.reqBodyType;\r\n        values.url = this.state.appApi.url;\r\n        values.method = this.state.appApi.method;\r\n        values.remark = this.state.remarkBraft.toHTML();\r\n        values.reqBodyOther = JSON.stringify(this.changeRowsToDefineJson(this.state.appApi.reqDefineRows));\r\n        values.resBody = JSON.stringify(this.changeRowsToDefineJson(this.state.appApi.resDefineRows));\r\n        values.reqBodyMessage = JSON.stringify(this.changeRowsToJsonMessage(this.state.appApi.reqDefineRows), null, 2);\r\n        values.resBodyMessage = JSON.stringify(this.changeRowsToJsonMessage(this.state.appApi.resDefineRows), null, 2);\r\n\r\n        this.setState({\r\n            saving: true\r\n        });\r\n        axios.post(ApiUrlConfig.SAVE_APP_API_URL, values).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('保存失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('保存成功');\r\n                    this.load(ret.data);\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            this.setState({\r\n                saving: false\r\n            });\r\n        });\r\n    }\r\n\r\n    onChangeUrl = (value: any) => {\r\n        this.setState({\r\n            appApi: {\r\n                ...this.state.appApi,\r\n                url: value.target.value\r\n            },\r\n        });\r\n    }\r\n\r\n    onChangeName = (value: any) => {\r\n        this.setState({\r\n            appApi: {\r\n                ...this.state.appApi,\r\n                name: value.target.value\r\n            },\r\n        });\r\n    }\r\n\r\n    onChangeDescription = (value: any) => {\r\n        this.setState({\r\n            appApi: {\r\n                ...this.state.appApi,\r\n                description: value.target.value\r\n            },\r\n        });\r\n    }\r\n\r\n    onChangeMethod = (value: any) => {\r\n        let inputType = '1';\r\n        if(value === '1') {\r\n            inputType = '2';\r\n        }else{\r\n            inputType = '1';\r\n        }\r\n        this.setState({\r\n            inputType: inputType,\r\n            appApi: {\r\n                ...this.state.appApi,\r\n                method: value\r\n            },\r\n        });\r\n    }\r\n\r\n    onClickResponseTab = (key: string, event: any) => {\r\n        if (key === '2') {\r\n            this.setState({\r\n                appApi: {\r\n                    ...this.state.appApi,\r\n                    resBodyMessage: JSON.stringify(this.changeRowsToJsonMessage(this.state.appApi.resDefineRows), null, 2),\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const language = 'json';\r\n        const options = {\r\n            selectOnLineNumbers: true,\r\n            minimap: {\r\n                enabled: false,\r\n            },\r\n            wordWrap: 'on' as any,\r\n            readOnly: true,\r\n            renderSideBySide: false\r\n        };\r\n        return <div className=\"card\">\r\n            <div className=\"card-header card-header-divider\" style={{paddingLeft: '10px'}}>\r\n                接口定义编辑\r\n                <Tooltip title=\"返回\">\r\n                    <Button onClick={() => this.back()} type=\"primary\" size=\"small\" shape=\"circle\"\r\n                            icon={<ArrowLeftOutlined/>}/>\r\n                </Tooltip>\r\n                <span className=\"card-subtitle\">被测系统接口的定义</span>\r\n            </div>\r\n            <div className=\"card-body\" style={{paddingLeft: 25}}>\r\n                <Collapse\r\n                    bordered={false}\r\n                    defaultActiveKey={['1', '2', '3', '4']}\r\n                    expandIcon={({ isActive }) => <CaretRightOutlined rotate={isActive ? 90 : 0} />}\r\n                    className=\"site-collapse-custom-collapse\"\r\n                >\r\n                    <Panel header=\"基本设置\" key=\"1\" className=\"site-collapse-custom-panel\">\r\n                        <Form\r\n                            {...layout}\r\n                            name=\"basic\"\r\n                            initialValues={this.state.initialValues}\r\n                            ref={this.state.ref}\r\n                        >\r\n                            <Form.Item\r\n                                label=\"接口名称\"\r\n                                name=\"name\"\r\n                                rules={[{ required: true, message: '请输入接口名称!' }]}\r\n                            >\r\n                                <div>\r\n                                    <Input onChange={this.onChangeName} value={this.state.appApi.name} defaultValue={this.state.appApi.name} />\r\n                                </div>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item\r\n                                label=\"简要描述\"\r\n                                name=\"description\"\r\n                                rules={[{required: false}]}\r\n                            >\r\n                                <div>\r\n                                    <Input.TextArea rows={4} onChange={this.onChangeDescription} value={this.state.appApi.description} defaultValue={this.state.appApi.description} />\r\n                                </div>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item\r\n                                label=\"接口地址\"\r\n                                name=\"url\"\r\n                                rules={[{ required: true, message: '请输入接口地址!' }]}\r\n                            >\r\n                                <Input.Group compact>\r\n                                    <Select value={this.state.appApi.method} onChange={this.onChangeMethod}>\r\n                                        <Option key=\"1\" value=\"1\">GET</Option>\r\n                                        <Option key=\"2\" value=\"2\">POST</Option>\r\n                                    </Select>\r\n                                    <Input onChange={this.onChangeUrl} style={{ width: '80%' }} value={this.state.appApi.url} defaultValue={this.state.appApi.url} />\r\n                                </Input.Group>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Panel>\r\n                    <Panel header=\"请求参数设置\" key=\"2\" className=\"site-collapse-custom-panel\">\r\n                        <div style={{textAlign: 'center'}}>\r\n                            <Radio.Group defaultValue=\"1\" value={this.state.inputType} buttonStyle=\"solid\" onChange={this.onChangeInputType}>\r\n                                <Radio.Button key=\"1\" style={{display: this.state.appApi.method === '2' ? 'inline-block' : 'none'}} value=\"1\">Body</Radio.Button>\r\n                                <Radio.Button key=\"2\" value=\"2\">Params</Radio.Button>\r\n                                <Radio.Button key=\"3\" value=\"3\">Headers</Radio.Button>\r\n                            </Radio.Group>\r\n                        </div>\r\n                        {this.renderReqInputArea()}\r\n\r\n                    </Panel>\r\n                    <Panel header=\"返回数据设置\" key=\"3\" className=\"site-collapse-custom-panel\">\r\n                        <Tabs defaultActiveKey=\"1\" onTabClick={this.onClickResponseTab}>\r\n                            <TabPane tab=\"模板\" key=\"1\">\r\n                                <div>\r\n                                    <JsonDefineEditor key=\"10\" id={this.state.appApi.id} defineRows={this.state.appApi.resDefineRows}></JsonDefineEditor>\r\n                                </div>\r\n                            </TabPane>\r\n                            <TabPane tab=\"预览\" key=\"2\">\r\n                                <div className=\"editor-container\" >\r\n                                    <MonacoEditor\r\n                                        theme=\"vs-dark\"\r\n                                        language={language}\r\n                                        value={this.state.appApi.resBodyMessage}\r\n                                        options={options}\r\n                                    />\r\n                                </div>\r\n                            </TabPane>\r\n                        </Tabs>\r\n                    </Panel>\r\n                    <Panel header=\"备注\" key=\"4\" className=\"site-collapse-custom-panel\">\r\n                        <div style={{background: '#fff'}}>\r\n                            <BraftEditor\r\n                                value={this.state.remarkBraft}\r\n                                onChange={this.handleEditorChange}\r\n                            />\r\n                        </div>\r\n                    </Panel>\r\n                </Collapse>\r\n\r\n                <div className=\"bottom-tool-bar\">\r\n                    <Button type=\"primary\" onClick={this.onSave} loading={this.state.saving}>保存</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withRouter(HttpApiEdit);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\httpapi\\FormEditor.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\httpapi\\JsonDefineEditor.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\httpapi\\HttpApiPreview.tsx",["303","304"],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\logic\\IfControllerEditor.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\logic\\WhileControllerEditor.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\logic\\LoopControllerEditor.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\entities\\ActionType.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\AutoCaseEditor.tsx",["305","306","307","308","309","310"],"import React, {useState, useEffect} from 'react';\r\nimport {Button, Menu, message, Tree} from \"antd\";\r\nimport {RootNodeEditor} from \"./RootNodeEditor\";\r\nimport {\r\n    SettingOutlined,\r\n    ChromeOutlined,\r\n    PlusOutlined,\r\n    DeleteOutlined,\r\n    CopyOutlined,\r\n    PlayCircleOutlined,\r\n    PauseOutlined\r\n} from '@ant-design/icons';\r\nimport axios from \"axios\";\r\nimport {ApiUrlConfig} from \"../../../../config/api.url\";\r\nimport {CommonNameComments} from \"./CommonNameComments\";\r\nimport {StepNode} from \"../entities/StepNode\";\r\nimport {IfControllerEditor} from \"../logic/IfControllerEditor\";\r\nimport {WhileControllerEditor} from '../logic/WhileControllerEditor';\r\nimport {LoopControllerEditor} from \"../logic/LoopControllerEditor\";\r\nimport {ActionType} from \"../entities/ActionType\";\r\nimport {HttpEditor} from \"./HttpEditor\";\r\nimport {PlatformApiEditor} from \"./PlatformApiEditor\";\r\nimport {RunEnvSelect} from \"../../../testmanage/runenv/RunEnvSelect\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {RandomUtils} from \"../../../../utils/RandomUtils\";\r\n\r\nconst {SubMenu} = Menu;\r\n\r\ninterface IState {\r\n    id?: number | null,\r\n}\r\n\r\ninterface MenuItem {\r\n    key: string,\r\n    title: string,\r\n    disabled: boolean,\r\n    id?: number,\r\n    dataId?: number,\r\n    dataType?: number,\r\n    icon?: any,\r\n    children?: MenuItem[]\r\n}\r\n\r\nconst defaultExpandedKeys = ['1'];\r\nconst rightMenuInitStyle = {\r\n    width: 200,\r\n    display: 'none',\r\n    position: 'absolute',\r\n    top: '10000px',\r\n    left: '10000px',\r\n    borderRadius: '3px',\r\n    zIndex: 20\r\n};\r\n\r\nconst MenuKey = {\r\n    'AddResource': '100',\r\n    'AddRecent': '200',\r\n    'AddMostCommonlyUsed': '201',\r\n    'AddPlatformApi': '10000',\r\n    'AddPlatformApiGetRandom': '10001',\r\n    'AddHttpRequest': '202',\r\n    'Remove': '300',\r\n    'Copy': '400',\r\n    'Paste': '500',\r\n    'Enable': '600',\r\n    'Disable': '700',\r\n    'AddLogic': '800',\r\n    'If': '801',\r\n    'While': '802',\r\n    'Loop': '803'\r\n};\r\n\r\nconst platformApiTree: MenuItem[] = [];\r\n\r\nconst rightMenuInitKeys: MenuItem[] = [\r\n    {key: MenuKey.AddResource, title: '添加资源', icon: <PlusOutlined/>, disabled: false, children: []},\r\n    {key: MenuKey.AddRecent, title: '添加最近', icon: <PlusOutlined/>, disabled: false, children: []},\r\n    {\r\n        key: MenuKey.AddMostCommonlyUsed, title: '添加常用', icon: <PlusOutlined/>, disabled: false, children: [\r\n            {key: MenuKey.AddHttpRequest, title: 'HTTP请求', disabled: false}\r\n        ]\r\n    },\r\n    {key: MenuKey.AddPlatformApi, title: '添加API', icon: <PlusOutlined/>, disabled: false, children: platformApiTree},\r\n    {key: MenuKey.Remove, title: '删除', icon: <DeleteOutlined/>, disabled: false},\r\n    {key: MenuKey.Copy, title: '复制', icon: <CopyOutlined/>, disabled: false},\r\n    {key: MenuKey.Paste, title: '粘贴', icon: <SettingOutlined/>, disabled: false},\r\n    {key: MenuKey.Enable, title: '启用', icon: <PlayCircleOutlined/>, disabled: false},\r\n    {key: MenuKey.Disable, title: '禁用', icon: <PauseOutlined/>, disabled: false},\r\n    {\r\n        key: MenuKey.AddLogic, title: '添加逻辑', icon: <PlusOutlined/>, disabled: false, children: [\r\n            {key: MenuKey.If, title: 'if', icon: null, disabled: false},\r\n            {key: MenuKey.While, title: 'while', icon: null, disabled: false},\r\n            {key: MenuKey.Loop, title: 'loop', icon: null, disabled: false}\r\n        ]\r\n    }\r\n];\r\n\r\nconst whenClickLeafStepNodeDisabledMenuItems: string[] = [MenuKey.AddResource, MenuKey.AddPlatformApi,\r\n    MenuKey.AddRecent, MenuKey.AddMostCommonlyUsed, MenuKey.AddLogic];\r\n\r\nconst initTreeData = [{\r\n    \"type\": \"root\",\r\n    \"level\": 1,\r\n    \"define\": {\r\n        \"userDefinedVariables\": [],\r\n        \"cookies\": [],\r\n        \"groups\": [],\r\n        \"name\": \"自动化用例\",\r\n        \"comments\": \"\",\r\n        \"enabled\": true,\r\n    },\r\n    \"title\": \"自动化用例\",\r\n    \"key\": \"1\",\r\n    \"isLeaf\": false,\r\n    children: [\r\n        {\r\n            \"type\": \"setUp\",\r\n            \"level\": 2,\r\n            \"define\": {\r\n                \"name\": \"\",\r\n                \"comments\": \"\",\r\n                \"enabled\": true,\r\n            },\r\n            \"children\": [],\r\n            \"isLeaf\": false,\r\n            \"title\": \"setUp\",\r\n            \"key\": \"2\",\r\n        }, {\r\n            \"type\": \"action\",\r\n            \"level\": 2,\r\n            \"define\": {\r\n                \"name\": \"\",\r\n                \"comments\": \"\",\r\n                \"enabled\": true,\r\n            },\r\n            \"children\": [],\r\n            \"isLeaf\": false,\r\n            \"title\": \"action\",\r\n            \"key\": \"3\",\r\n        }, {\r\n            \"type\": \"tearDown\",\r\n            \"level\": 2,\r\n            \"define\": {\r\n                \"name\": \"\",\r\n                \"comments\": \"\",\r\n                \"enabled\": true,\r\n            },\r\n            \"children\": [],\r\n            \"isLeaf\": false,\r\n            \"title\": \"tearDown\",\r\n            \"key\": \"4\",\r\n        }\r\n    ]\r\n}];\r\n\r\nconst AutoCaseEditor: React.FC<IState> = (props) => {\r\n    let history = useHistory();\r\n    const [saving, setSaving] = useState(false);\r\n    const [running1, setRunning1] = useState(false);\r\n    const [loadedPlatformApi, setLoadedPlatformApi] = useState(false);\r\n    const [id, setId] = useState(props.id);\r\n    const [expandedKeys, setExpandedKeys] = useState(['1', '2', '3', '4']);\r\n    const [contextMenuPosition, setContextMenuPosition] = useState(rightMenuInitStyle);\r\n    const [rightMenuKeys, setRightMenuKeys] = useState(rightMenuInitKeys);\r\n    const [treeData, setTreeData] = useState<StepNode[]>(initTreeData);\r\n    const [currStepNode, setCurrStepNode] = useState<StepNode>(treeData[0]);\r\n    const [rootNode, setRootNode] = useState<StepNode>(treeData[0]);\r\n    const [runEnvId, setRunEnvId] = useState('');\r\n    if (id !== props.id) {\r\n        setId(props.id);\r\n    }\r\n\r\n    function loadPlatformApiTree() {\r\n        if (!loadedPlatformApi) {\r\n            axios.get(ApiUrlConfig.GET_PLATFORM_API_TREE_URL).then(resp => {\r\n                if (resp.status !== 200) {\r\n                    message.error('加载平台api失败');\r\n                } else {\r\n                    const ret = resp.data;\r\n                    if (ret.code !== 0) {\r\n                        message.error(ret.message);\r\n                    } else if (!ret.data) {\r\n\r\n                    } else {\r\n                        setLoadedPlatformApi(true);\r\n                        if (platformApiTree.length > 0) {\r\n                            return;\r\n                        }\r\n                        for (let i = 0; i < ret.data.length; i++) {\r\n                            const firstLevel: MenuItem = {\r\n                                key: 'platform_api_' + ret.data[i].id + '$' + ret.data[i].name,\r\n                                id: ret.data[i].id,\r\n                                title: ret.data[i].name,\r\n                                disabled: false, children: []\r\n                            };\r\n                            platformApiTree.push(firstLevel);\r\n\r\n                            const children = ret.data[i].children || [];\r\n                            if (!children || children.length < 1) {\r\n                                continue;\r\n                            }\r\n                            for (let j = 0; j < children.length; j++) {\r\n                                firstLevel.children !== undefined && firstLevel.children.push({\r\n                                    key: 'platform_api_' + children[j].id + '$' + children[j].name,\r\n                                    id: children[j].id,\r\n                                    title: children[j].name,\r\n                                    disabled: false, children: []\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function findStepNode(dataList: StepNode[], key: string) {\r\n        for (let i = 0; i < dataList.length; i++) {\r\n            if (dataList[i].key === key) {\r\n                return dataList[i];\r\n            }\r\n            if (dataList[i].children && dataList[i].children.length > 0) {\r\n                const node = findStepNode(dataList[i].children, key);\r\n                if (node !== null) {\r\n                    return node;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function refreshTree(actionType: ActionType, key: string, value: any) {\r\n        const node: StepNode = findStepNode(treeData, key);\r\n        if (node === null) {\r\n            return;\r\n        }\r\n        node.title = value.toString();\r\n        setTreeData([...treeData]);\r\n    }\r\n\r\n    function onExpand(expandedKeys, {expanded: bool, node}) {\r\n        //console.log(expandedKeys);\r\n        //console.log(bool);\r\n        //console.log(node);\r\n        if (!bool) {\r\n            const ind = expandedKeys.indexOf(node.key);\r\n            if (ind > -1) {\r\n                expandedKeys.shift(ind, 1);\r\n            }\r\n        }\r\n        setExpandedKeys(expandedKeys);\r\n    }\r\n\r\n    function hideRightMenu(e) {\r\n        setContextMenuPosition({\r\n            width: 170,\r\n            display: 'none',\r\n            position: 'absolute',\r\n            top: '10000px', left: '10000px',\r\n            borderRadius: '3px',\r\n            zIndex: 20\r\n        });\r\n        e.stopPropagation();\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', hideRightMenu);\r\n        return () => {\r\n            document.removeEventListener('click', () => {\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        load();\r\n        loadPlatformApiTree();\r\n    }, [id]);\r\n\r\n    function load() {\r\n        axios.post(ApiUrlConfig.LOAD_AUTO_CASE_URL, {id: id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载用例失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    let steps;\r\n                    if (ret.data.steps) {\r\n                        steps = JSON.parse(ret.data.steps);\r\n                    } else {\r\n                        steps = JSON.parse(JSON.stringify(initTreeData));\r\n                    }\r\n                    setTreeData(steps);\r\n                    setCurrStepNode(steps[0]);\r\n                    setRootNode(steps[0]);\r\n                    setRunEnvId(ret.data.lastRunEnvId);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function onRightClick({event, node}: any) {\r\n        setCurrStepNode(node);\r\n        if (node.key === '1') {\r\n            hideRightMenu(event);\r\n            return;\r\n        }\r\n\r\n        if (node.isLeaf) {\r\n            for (let i = 0; i < rightMenuKeys.length; i++) {\r\n                if (whenClickLeafStepNodeDisabledMenuItems.indexOf(rightMenuKeys[i].key) > -1) {\r\n                    rightMenuKeys[i].disabled = true;\r\n                }\r\n            }\r\n            setRightMenuKeys(rightMenuKeys);\r\n        } else {\r\n            for (let i = 0; i < rightMenuKeys.length; i++) {\r\n                rightMenuKeys[i].disabled = false;\r\n            }\r\n        }\r\n\r\n        const x = event.clientX + 'px';\r\n        const y = event.clientY + 'px';\r\n        setTimeout(function () {\r\n            setContextMenuPosition({\r\n                width: 170,\r\n                display: 'block',\r\n                position: 'absolute',\r\n                top: y, left: x,\r\n                borderRadius: '3px',\r\n                zIndex: 20\r\n            });\r\n        }, 100);\r\n    }\r\n\r\n    function onDragEnter(info) {\r\n        //console.log(info);\r\n        // expandedKeys 需要受控时设置\r\n        // this.setState({\r\n        //   expandedKeys: info.expandedKeys,\r\n        // });\r\n    }\r\n\r\n    function onDrop(info) {\r\n        //console.log(info);\r\n        const dropKey = info.node.key;\r\n        const dragKey = info.dragNode.key;\r\n        const dropPos = info.node.pos.split('-');\r\n        const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n        const loop = (data, key, callback) => {\r\n            for (let i = 0; i < data.length; i++) {\r\n                if (data[i].key === key) {\r\n                    return callback(data[i], i, data);\r\n                }\r\n                if (data[i].children) {\r\n                    loop(data[i].children, key, callback);\r\n                }\r\n            }\r\n        };\r\n        const data = [...treeData];\r\n\r\n        // Find dragObject\r\n        let dragObj;\r\n        loop(data, dragKey, (item, index, arr) => {\r\n            arr.splice(index, 1);\r\n            dragObj = item;\r\n        });\r\n\r\n        if (!info.dropToGap) {\r\n            // Drop on the content\r\n            loop(data, dropKey, item => {\r\n                item.children = item.children || [];\r\n                // where to insert 示例添加到头部，可以是随意位置\r\n                item.children.unshift(dragObj);\r\n            });\r\n        } else if (\r\n            (info.node.props.children || []).length > 0 && // Has children\r\n            info.node.props.expanded && // Is expanded\r\n            dropPosition === 1 // On the bottom gap\r\n        ) {\r\n            loop(data, dropKey, item => {\r\n                item.children = item.children || [];\r\n                // where to insert 示例添加到头部，可以是随意位置\r\n                item.children.unshift(dragObj);\r\n                // in previous version, we use item.children.push(dragObj) to insert the\r\n                // item to the tail of the children\r\n            });\r\n        } else {\r\n            let ar;\r\n            let i;\r\n            loop(data, dropKey, (item, index, arr) => {\r\n                ar = arr;\r\n                i = index;\r\n            });\r\n            if (dropPosition === -1) {\r\n                ar.splice(i, 0, dragObj);\r\n            } else {\r\n                ar.splice(i + 1, 0, dragObj);\r\n            }\r\n        }\r\n\r\n        setTreeData(data);\r\n    }\r\n\r\n    function onSelect(selectedKeys, e: { selected: boolean, selectedNodes, node, event }) {\r\n        setCurrStepNode(e.node);\r\n        if (e.node.isLeaf) {\r\n\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    function allowDrop({dropNode, dropPosition}) {\r\n        console.log(dropNode);\r\n        console.log(dropPosition);\r\n        if (dropNode.isLeaf && dropPosition === 0) {\r\n            return false;\r\n        }\r\n        if (dropNode.key === '1') {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function renderRightMenu() {\r\n        const list = rightMenuKeys.map(v => {\r\n            if (!v.children || v.children.length < 1) {\r\n                return (<Menu.Item icon={v.icon} key={v.key} disabled={v.disabled}>\r\n                    {v.title}\r\n                </Menu.Item>);\r\n            } else if (v.children && v.children.length > 0) {\r\n                const subMenuList = v.children.map(subMenu => {\r\n                    if (!subMenu.children || subMenu.children.length < 1) {\r\n                        return (<Menu.Item icon={subMenu.icon} key={subMenu.key} disabled={subMenu.disabled}>\r\n                            {subMenu.title}\r\n                        </Menu.Item>);\r\n                    } else if (subMenu.children && subMenu.children.length > 0) {\r\n                        const subSubMenuList = subMenu.children.map(subSubMenu => {\r\n                            return (<Menu.Item key={subSubMenu.key}\r\n                                               disabled={subSubMenu.disabled}>{subSubMenu.title}</Menu.Item>)\r\n                        });\r\n                        return (<SubMenu disabled={subMenu.disabled} key={subMenu.key} icon={subMenu.icon}\r\n                                         title={subMenu.title}>\r\n                            {subSubMenuList}\r\n                        </SubMenu>)\r\n                    }\r\n                });\r\n                return (<SubMenu disabled={v.disabled} key={v.key} icon={v.icon} title={v.title}>\r\n                    {subMenuList}\r\n                </SubMenu>)\r\n            }\r\n        });\r\n        return list;\r\n    }\r\n\r\n    function addTreeNode(define: any, type: string, isLeaf: boolean, title: string) {\r\n        const node: StepNode = {\r\n            type: type,\r\n            isLeaf: isLeaf, title: title,\r\n            level: currStepNode.level + 1,\r\n            key: RandomUtils.getKey(),\r\n            children: [], define: define\r\n        };\r\n        currStepNode.children.push(node);\r\n        setTreeData([...treeData]);\r\n        if (expandedKeys.indexOf(currStepNode.key) < 0) {\r\n            expandedKeys.push(currStepNode.key);\r\n            setExpandedKeys(expandedKeys);\r\n        }\r\n    }\r\n\r\n    function addNode(type: string, isLeaf: boolean) {\r\n        const define = getDefine(type);\r\n        addTreeNode(define, type, isLeaf, type);\r\n    }\r\n\r\n    function getDefine(type: string): any {\r\n        let define;\r\n        if (type === 'if' || type === 'while' || type === 'loop') {\r\n            define = {name: '', comments: '', condition: '', enabled: true};\r\n        } else if (type === 'http') {\r\n            define = {\r\n                name: '', comments: '', enabled: true, requestType: 'POST',\r\n                url: '', params: [], headers: [], bodyType: 'raw', rawType: 'json', formData: [],\r\n                formUrlencoded: [], content: '', checkErrorList: [], responseExtractorList: [],\r\n            };\r\n        } else if (type.startsWith('调用平台API(')) {\r\n            define = {name: '', comments: '', parametricList: [], platformApiId: -1, enabled: true};\r\n        }\r\n        return define;\r\n    }\r\n\r\n    function onAddIfNode() {\r\n        addNode('if', false);\r\n    }\r\n\r\n    function onAddWhileNode() {\r\n        addNode('while', false);\r\n    }\r\n\r\n    function onAddLoopNode() {\r\n        addNode('loop', false);\r\n    }\r\n\r\n    function onAddHttpRequestNode() {\r\n        addNode('http', true);\r\n    }\r\n\r\n    function onAddPlatformApi(key: string) {\r\n        const id = key.substr('platform_api_'.length, key.indexOf('$') + 1 - 'platform_api_'.length);\r\n        const name = key.substr(key.indexOf('$') + 1);\r\n        const define = getDefine('调用平台API(' + name + \")\");\r\n        define.platformApiId = parseInt(id);\r\n        define.parametricList = [];\r\n        addTreeNode(define, '调用平台API(' + name + \")\", true, name);\r\n    }\r\n\r\n    function onClickRightMenuItem({item, key, keyPath, domEvent}) {\r\n        let platformApiKey;\r\n        if (key.startsWith('platform_api_')) {\r\n            platformApiKey = key;\r\n        }\r\n        switch (key) {\r\n            case MenuKey.If:\r\n                onAddIfNode();\r\n                break;\r\n            case MenuKey.While:\r\n                onAddWhileNode();\r\n                break;\r\n            case MenuKey.Loop:\r\n                onAddLoopNode();\r\n                break;\r\n            case MenuKey.AddHttpRequest:\r\n                onAddHttpRequestNode();\r\n                break;\r\n            case platformApiKey:\r\n                onAddPlatformApi(key);\r\n                break;\r\n            case '99':\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function onSave() {\r\n        setSaving(true);\r\n        const data = {id: id, type: 1, steps: JSON.stringify(treeData)};\r\n        axios.post(ApiUrlConfig.SAVE_AUTO_CASE_URL, data).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('保存失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            setSaving(false);\r\n        });\r\n    }\r\n\r\n    function renderRightPanel() {\r\n        switch (currStepNode.type) {\r\n            case \"root\":\r\n                return (<RootNodeEditor refreshTree={refreshTree} stepNode={currStepNode}\r\n                                        define={currStepNode.define}></RootNodeEditor>);\r\n            case \"if\":\r\n                return (<IfControllerEditor refreshTree={refreshTree} stepNode={currStepNode}\r\n                                            define={currStepNode.define}></IfControllerEditor>);\r\n            case \"while\":\r\n                return (<WhileControllerEditor refreshTree={refreshTree} stepNode={currStepNode}\r\n                                               define={currStepNode.define}></WhileControllerEditor>);\r\n            case 'loop':\r\n                return (<LoopControllerEditor refreshTree={refreshTree} stepNode={currStepNode}\r\n                                              define={currStepNode.define}></LoopControllerEditor>);\r\n            case 'http':\r\n                return (\r\n                    <HttpEditor userDefinedVariables={rootNode.define.userDefinedVariables} refreshTree={refreshTree}\r\n                                stepNode={currStepNode} define={currStepNode.define}></HttpEditor>);\r\n            default:\r\n                if (currStepNode.type.startsWith('调用平台API(')) {\r\n                    return (<PlatformApiEditor userDefinedVariables={rootNode.define.userDefinedVariables}\r\n                                               stepNode={currStepNode} define={currStepNode.define}\r\n                                               refreshTree={refreshTree}></PlatformApiEditor>);\r\n                }\r\n                return (<CommonNameComments refreshTree={refreshTree} stepNode={currStepNode}\r\n                                            define={currStepNode.define}></CommonNameComments>)\r\n        }\r\n    }\r\n\r\n    function draggable(node: any) {\r\n        if (['1', '2', '3', '4'].indexOf(node.key) > -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function onRun(runType) {\r\n        if (!window.confirm('确定运行吗？')) {\r\n            return;\r\n        }\r\n        if (runType === 1) {\r\n            setRunning1(true);\r\n        }\r\n        axios.post(ApiUrlConfig.RUN_CASE_URL,\r\n            {runType: runType, caseId: id, runEnvId: runEnvId}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('保存失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            if (runType === 1) {\r\n                setRunning1(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    function onViewResult() {\r\n        window.open(\"/planresult/\" + id + \"/\" + \"2\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"case-editor-parent\">\r\n            <div className=\"case-editor-toolbar\">\r\n                <Button size=\"small\" type=\"primary\" loading={saving} onClick={onSave}>保存</Button>\r\n                <Button size=\"small\" type=\"primary\" loading={running1} onClick={() => {\r\n                    onRun(1);\r\n                }}>运行</Button>\r\n                <Button size=\"small\" type=\"primary\" onClick={() => {\r\n                    onRun(2);\r\n                }}>运行组合</Button>\r\n                <Button size=\"small\" type=\"primary\" danger>停止</Button>\r\n                <Button size=\"small\" type=\"default\">查看内置函数与变量</Button>\r\n                <Button size=\"small\" type=\"primary\" onClick={() => {\r\n                    onViewResult();\r\n                }}>查看运行结果</Button>\r\n                <RunEnvSelect onChange={setRunEnvId} style={{width: '150px'}} value={runEnvId}></RunEnvSelect>\r\n            </div>\r\n            <div className=\"case-editor-main-content\">\r\n                <div className=\"case-editor-step-tree\">\r\n                    <Tree\r\n                        className=\"draggable-tree\"\r\n                        onRightClick={onRightClick}\r\n                        onExpand={onExpand}\r\n                        defaultExpandedKeys={defaultExpandedKeys}\r\n                        draggable={draggable}\r\n                        blockNode\r\n                        expandedKeys={expandedKeys}\r\n                        showLine={false}\r\n                        onDragEnter={onDragEnter}\r\n                        onDrop={onDrop}\r\n                        onSelect={onSelect}\r\n                        allowDrop={allowDrop}\r\n                        treeData={treeData}\r\n                    />\r\n                </div>\r\n                <div className=\"case-editor-right-panel\">\r\n                    {renderRightPanel()}\r\n                </div>\r\n            </div>\r\n            <Menu onClick={onClickRightMenuItem} className=\"node-tree-context-menu\" style={contextMenuPosition as any}\r\n                  mode=\"vertical\">\r\n                {renderRightMenu()}\r\n            </Menu>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {AutoCaseEditor};\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\RootNodeEditor.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\HttpEditor.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\CommonNameComments.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\AutoCaseVariableEditor.tsx",["311"],"import React, {useState} from \"react\";\r\nimport {Button, Input, Modal} from \"antd\";\r\nimport {Row, Col, message} from 'antd';\r\nimport {AutoCaseVariable} from \"../entities/AutoCaseVariable\";\r\nimport {Select} from 'antd';\r\nimport {RandomUtils} from \"../../../../utils/RandomUtils\";\r\n\r\nconst {TextArea} = Input;\r\nconst {Option} = Select;\r\n\r\ninterface IState {\r\n    userDefinedVariables: AutoCaseVariable[]\r\n}\r\n\r\n\r\nconst AutoCaseVariableEditor: React.FC<IState> = (props) => {\r\n    const [userDefinedVariables, setUserDefinedVariables] = useState(props.userDefinedVariables);\r\n    const [isVariableDetailModalVisible, setVariableDetailModalVisible] = useState(false);\r\n    const [currIndex, setCurrIndex] = useState(-1);\r\n    const [variableName, setVariableName] = useState(\"\");\r\n    const [variableValue, setVariableValue] = useState(\"\");\r\n\r\n    if (JSON.stringify(userDefinedVariables) !== JSON.stringify(props.userDefinedVariables)) {\r\n        for (let i = 0; i < userDefinedVariables.length; i++) {\r\n            userDefinedVariables[i]['key'] = RandomUtils.getKey();\r\n        }\r\n        setUserDefinedVariables(props.userDefinedVariables);\r\n    }\r\n\r\n    function onClickRow(index: number) {\r\n        setCurrIndex(index);\r\n    }\r\n\r\n    function onChangeName(value: any, index: number) {\r\n        userDefinedVariables[index].name = value.target.value;\r\n    }\r\n\r\n    function onChangeValue(value: any, index: number) {\r\n        userDefinedVariables[index].value = value.target.value;\r\n    }\r\n\r\n    function renderRows() {\r\n        return userDefinedVariables.map((value, index) => {\r\n            const variableRowSelectedClass = index === currIndex ? \"variable-row-selected\" : \"\";\r\n            return (<Row className={variableRowSelectedClass} style={{marginBottom: '5px'}} key={value['key']}\r\n                         onClick={() => {\r\n                             onClickRow(index)\r\n                         }}>\r\n                <Col span={12} style={{paddingRight: '5px'}}>\r\n                    <Input defaultValue={value.name} onChange={(v) => {onChangeName(v, index);}}/>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <Input defaultValue={value.value} onChange={(v) => {onChangeValue(v, index);}}/>\r\n                </Col>\r\n            </Row>)\r\n        });\r\n    }\r\n\r\n    function addVariable() {\r\n        const v = {name: '', type: 'string', value: ''};\r\n        v['key'] = RandomUtils.getKey();\r\n        userDefinedVariables.push(v);\r\n        setUserDefinedVariables(userDefinedVariables);\r\n    }\r\n\r\n    function onRemove() {\r\n        if(!window.confirm('确定删除该变量吗?')) {\r\n            return;\r\n        }\r\n        userDefinedVariables.splice(currIndex, 1);\r\n        setUserDefinedVariables(userDefinedVariables);\r\n    }\r\n\r\n    function handleOk() {\r\n        userDefinedVariables[currIndex].name = variableName;\r\n        userDefinedVariables[currIndex].value = variableValue;\r\n        userDefinedVariables[currIndex]['key'] = RandomUtils.getKey();\r\n        setUserDefinedVariables(userDefinedVariables);\r\n        setVariableDetailModalVisible(false);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVariableDetailModalVisible(false);\r\n    }\r\n\r\n    function onClickDetail() {\r\n        if (!userDefinedVariables[currIndex]) {\r\n            message.info('请选择一个变量');\r\n            return;\r\n        }\r\n        setVariableName(userDefinedVariables[currIndex].name);\r\n        setVariableValue(userDefinedVariables[currIndex].value);\r\n        setVariableDetailModalVisible(true);\r\n    }\r\n\r\n    function onUpSort() {\r\n        userDefinedVariables.sort((a, b) => {\r\n            if (a.name <= b.name) {\r\n                return -1;\r\n            } else if (a.name === b.name) {\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        });\r\n        setUserDefinedVariables(userDefinedVariables);\r\n    }\r\n\r\n    function onDownSort() {\r\n        userDefinedVariables.sort((a, b) => {\r\n            if (a.name <= b.name) {\r\n                return 1;\r\n            } else if (a.name === b.name) {\r\n                return 0;\r\n            } else {\r\n                return -1;\r\n            }\r\n        });\r\n        setUserDefinedVariables(userDefinedVariables);\r\n    }\r\n\r\n    function onMove(type: number) {\r\n        if (!userDefinedVariables[currIndex]) {\r\n            message.info('请选择一个变量');\r\n            return;\r\n        }\r\n        if ((type === 1 || type === 3) && currIndex <= 0) {\r\n            return;\r\n        }\r\n        if (type === 2 && currIndex >= userDefinedVariables.length - 1) {\r\n            return;\r\n        }\r\n        let tempIndex;\r\n        if (type === 1) {\r\n            tempIndex = currIndex - 1;\r\n        } else if (type === 2) {\r\n            tempIndex = currIndex + 1;\r\n        } else if (type === 3) {\r\n            tempIndex = 0;\r\n        }\r\n        const temp = userDefinedVariables[tempIndex];\r\n        userDefinedVariables[tempIndex] = userDefinedVariables[currIndex];\r\n        userDefinedVariables[currIndex] = temp;\r\n        setUserDefinedVariables(userDefinedVariables);\r\n        setCurrIndex(tempIndex);\r\n    }\r\n\r\n    function onChangeNameInModal(e) {\r\n        setVariableName(e.target.value);\r\n    }\r\n\r\n    function onChangeValueInModal(e) {\r\n        setVariableValue(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className=\"variable-toolbar\">\r\n                    <Button size=\"small\" type=\"primary\" onClick={onClickDetail}>详细</Button>\r\n                    <Button size=\"small\" type=\"primary\" onClick={addVariable}>添加变量</Button>\r\n                    <Button size=\"small\" type=\"primary\" onClick={onRemove}>删除</Button>\r\n                    <Button size=\"small\" type=\"primary\" onClick={() => onMove(1)}>上移</Button>\r\n                    <Button size=\"small\" type=\"primary\" onClick={() => onMove(2)}>下移</Button>\r\n                    <Button size=\"small\" type=\"primary\" onClick={onUpSort}>升序</Button>\r\n                    <Button size=\"small\" type=\"primary\" onClick={onDownSort}>降序</Button>\r\n                    <Button size=\"small\" type=\"primary\" onClick={() => onMove(3)}>置顶</Button>\r\n                </div>\r\n                <Row style={{paddingTop: '5px'}}>\r\n                    <Col span={12} style={{fontWeight: 600, color: '#6e6e6e'}}>变量名称</Col>\r\n                    <Col span={12} style={{fontWeight: 600, color: '#6e6e6e'}}>\r\n                        变量值\r\n                    </Col>\r\n                </Row>\r\n                {renderRows()}\r\n            </div>\r\n            <Modal width={700} title=\"变量详细\" visible={isVariableDetailModalVisible} onOk={handleOk}\r\n                   onCancel={handleCancel}>\r\n                <Row style={{paddingBottom: '5px'}}>\r\n                    <Col flex=\"100px\" style={{fontWeight: 600, color: '#6e6e6e'}}>变量名称</Col>\r\n                    <Col flex=\"auto\">\r\n                        <Input value={variableName} onChange={onChangeNameInModal}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{paddingBottom: '5px'}}>\r\n                    <Col flex=\"100px\" style={{fontWeight: 600, color: '#6e6e6e'}}>变量值</Col>\r\n                    <Col flex=\"auto\">\r\n                        <TextArea rows={8} value={variableValue} onChange={onChangeValueInModal}/>\r\n                    </Col>\r\n                </Row>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport {AutoCaseVariableEditor};\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\KeyValueEditor.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\ContentEditor.tsx",["312","313"],"import React, {useState} from \"react\";\r\nimport MonacoEditor from \"react-monaco-editor\";\r\nimport {AutoCaseVariable} from \"../entities/AutoCaseVariable\";\r\n\r\ninterface IState {\r\n    language: string;\r\n    content: string;\r\n    refreshContent: any;\r\n    userDefinedVariables?: AutoCaseVariable[];\r\n}\r\n\r\n\r\nconst ContentEditor: React.FC<IState> = (props) => {\r\n    const [language, setLanguage] = useState(props.language);\r\n    const [content, setContent] = useState(props.content);\r\n    if(content !== props.content) {\r\n        setContent(props.content);\r\n    }\r\n    if(language !== props.language) {\r\n        setLanguage(props.language);\r\n    }\r\n    const options = {\r\n        selectOnLineNumbers: true,\r\n        renderSideBySide: false,\r\n        contextmenu: false, // 禁止右键\r\n        fixedOverflowWidgets: true, // 超出编辑器大小的使用fixed属性显示\r\n        quickSuggestions: true, // 默认的提示关掉\r\n        minimap: {\r\n            // 缩略图\r\n            enabled: false\r\n        },\r\n        wordWrap: 'on' as any,\r\n    };\r\n\r\n    function builtInSuggestions(monaco) {\r\n        const suggestions: any = [];\r\n        suggestions.push({\r\n            label: 'builtin_request',\r\n            kind: monaco.languages.CompletionItemKind.Variable,\r\n            insertText: '${__builtin_request}',\r\n            detail: '上一个请求包内容',\r\n        });\r\n        suggestions.push({\r\n            label: 'builtin_response',\r\n            kind: monaco.languages.CompletionItemKind.Variable,\r\n            insertText: '${__builtin_response}',\r\n            detail: '上一个响应包内容',\r\n        });\r\n        const builtInFunctions: any = [{\r\n            label: 'max',\r\n            insertText: '$__max(a, b)}',\r\n            kind: monaco.languages.CompletionItemKind.Function,\r\n            detail: 'max',\r\n            documentation: 'max函数\\n原型:\\nmax(a, b)\\n返回a和b的较大者',\r\n        }];\r\n\r\n        return suggestions.concat(builtInFunctions);\r\n    }\r\n\r\n    function registerCompletionItemProvider(monaco, userDefinedVariables: AutoCaseVariable[]) {\r\n        const suggestions: any[] = [];\r\n        let count = userDefinedVariables.length;\r\n        if(!count) {\r\n            count = 0;\r\n        }\r\n        if(count < 1) {\r\n            return [];\r\n        }\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const temp = {};\r\n            temp['label'] = userDefinedVariables[i].name;\r\n            temp['kind'] = monaco.languages.CompletionItemKind.Variable;\r\n            temp['insertText'] = '${' + userDefinedVariables[i].name + '}';\r\n            temp['detail'] = userDefinedVariables[i].name;\r\n            suggestions.push(temp);\r\n        }\r\n        const data = builtInSuggestions(monaco);\r\n        for (let i = 0; i < data.length; i++) {\r\n            suggestions.push(data[i]);\r\n        }\r\n        for (let i = 0; i < suggestions.length; i++) {\r\n            delete suggestions[i]['range'];\r\n        }\r\n        const result: any[] = [];\r\n        const h = {};\r\n        for (let i = 0; i < suggestions.length; i++) {\r\n            // 如果hash表中没有当前项\r\n            if (!h[suggestions[i]['label']]) {\r\n                // 存入hash表\r\n                h[suggestions[i]['label']] = true;\r\n                // 把当前数组的当前项push到临时数组里面\r\n                result.push(suggestions[i]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function editorDidMountHandle(editor, monaco) {\r\n        editor.focus();\r\n        if(!props.userDefinedVariables) {\r\n            return ;\r\n        }\r\n        const userDefinedVariables = props.userDefinedVariables || [];\r\n        // const suggestions: any[] = registerCompletionItemProvider(monaco, userDefinedVariables);\r\n\r\n        if (!window['isRegisterCompletionItemProvider']) {\r\n            monaco.languages.registerCompletionItemProvider(props.language, {\r\n                provideCompletionItems: function (model, position, context) {\r\n                    return {\r\n                        suggestions: registerCompletionItemProvider(monaco, userDefinedVariables)\r\n                    };\r\n                },\r\n                //triggerCharacters: ['.']\r\n            });\r\n        }\r\n        window['isRegisterCompletionItemProvider'] = true;\r\n\r\n    }\r\n\r\n    function onChangeHandle(value, e) {\r\n        setContent(value);\r\n        props.refreshContent(value);\r\n    }\r\n\r\n    return (<div>\r\n        <div style={{width: '100%', height: '400px'}} >\r\n            <MonacoEditor\r\n                theme=\"vs-dark\"\r\n                language={language}\r\n                value={content}\r\n                options={options}\r\n                onChange={onChangeHandle}\r\n                editorDidMount={editorDidMountHandle}\r\n            />\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport {ContentEditor};\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\case-editor\\editor\\PlatformApiEditor.tsx",["314"],"import React, {useEffect, useState} from \"react\";\r\nimport {EditorIState} from \"../entities/EditorIState\";\r\nimport {PlatformApiNode} from \"../entities/PlatformApiNode\";\r\nimport axios from \"axios\";\r\nimport {ApiUrlConfig} from \"../../../../config/api.url\";\r\nimport {AutoComplete, Col, Input, message, Modal, Row, Select, Space, Table, Tooltip} from \"antd\";\r\nimport {ParameterDefineRow} from \"../../../../entities/ParameterDefineRow\";\r\nimport {CommonNameComments} from \"./CommonNameComments\";\r\nimport {EditOutlined} from \"@ant-design/icons\";\r\nimport {ContentEditor} from \"./ContentEditor\";\r\nimport {RandomUtils} from \"../../../../utils/RandomUtils\";\r\nconst Option = Select.Option;\r\n\r\nconst PlatformApiEditor: React.FC<EditorIState<PlatformApiNode>> = (props) => {\r\n    const [id, setId] = useState(props.define.platformApiId);\r\n    const [parametricList, setParametricList] = useState(props.define.parametricList);\r\n    const [parameterDefineRows, setParameterDefineRows] = useState<ParameterDefineRow[]>([]);\r\n    const [isDetailVisible, setIsDetailVisible] = useState(false);\r\n    const [currRow, setCurrRow] = useState<ParameterDefineRow|null>(null);\r\n    const [currKey, setCurrKey] = useState('');\r\n    const [currValue, setCurrValue] = useState('');\r\n\r\n    if(JSON.stringify(parametricList) !== JSON.stringify(props.define.parametricList)) {\r\n        setParametricList(props.define.parametricList);\r\n    }\r\n    if(id !== props.define.platformApiId) {\r\n        setId(props.define.platformApiId);\r\n    }\r\n    useEffect(() => {\r\n        load();\r\n    }, [id]);\r\n\r\n    function setDetail(record: ParameterDefineRow) {\r\n        setIsDetailVisible(true);\r\n        setCurrRow(record);\r\n        setCurrKey(record.name);\r\n        setCurrValue(record.defaultValue);\r\n    }\r\n\r\n    function onChangeParameterValue(record: ParameterDefineRow|null, value: string) {\r\n        if(!record) {\r\n            return ;\r\n        }\r\n        record['key'] = RandomUtils.getKey();\r\n        record.defaultValue = value;\r\n        let found = false;\r\n        for (let i = 0; i < parametricList.length; i++) {\r\n            if(parametricList[i].name === record.name) {\r\n                parametricList[i].value = value;\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if(!found) {\r\n            parametricList.push({name: record.name, value: value});\r\n        }\r\n        setParametricList(parametricList);\r\n    }\r\n\r\n    const options = props.userDefinedVariables?.map(v => {\r\n        return {label: v.name, value: '${' + v.name + '}'};\r\n    }) as any[];\r\n\r\n    const columns = [\r\n        {\r\n            title: '参数名称',\r\n            dataIndex: 'name',\r\n            width: '180px',\r\n            key: 'key',\r\n            render: (text, record) => <Input disabled={true} value={record.name} />,\r\n        },\r\n        {\r\n            title: '描述',\r\n            key: 'key',\r\n            dataIndex: 'description',\r\n            render: (text, record) => <Input disabled={true} value={record.description} />,\r\n        },\r\n        {\r\n            title: '类型',\r\n            dataIndex: 'type',\r\n            width: '110px',\r\n            key: 'key',\r\n            render: (text, record) => <Select disabled={true} value={record.type} style={{ width: 100 }} >\r\n                <Option value=\"1\" key={1}>字符串</Option>\r\n                <Option value=\"2\" key={2}>数字</Option>\r\n                <Option value=\"3\" key={3}>布尔型</Option>\r\n            </Select>,\r\n        },\r\n        {\r\n            title: '输入输出',\r\n            dataIndex: 'inout',\r\n            width: '110px',\r\n            key: 'key',\r\n            render: (text, record) => <Select disabled={true} value={record.inout} style={{ width: 100 }} >\r\n                <Option value=\"1\" key={1}>输入参数</Option>\r\n                <Option value=\"2\" key={2}>输出参数</Option>\r\n            </Select>,\r\n        },\r\n        {\r\n            title: '参数值',\r\n            key: 'key',\r\n            dataIndex: 'defaultValue',\r\n            render: (text, record) => {\r\n                return <AutoComplete\r\n                    defaultValue={record.defaultValue} onChange={(value) => {\r\n                        onChangeParameterValue(record, value);\r\n                    }}\r\n                    style={{width: '100%'}}\r\n                    options={options}\r\n                />;\r\n            }\r\n        },\r\n        {\r\n            title: '操作',\r\n            key: 'key',\r\n            width: '60px',\r\n            render: (text, record, index) => (\r\n                <Space size=\"middle\">\r\n                    <Tooltip placement=\"topLeft\" title=\"详细设置\">\r\n                        <a onClick={() => setDetail(record)}><EditOutlined /></a>\r\n                    </Tooltip>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n\r\n    function handleOk() {\r\n        setIsDetailVisible(false);\r\n        onChangeParameterValue(currRow, currValue);\r\n        setParameterDefineRows([...parameterDefineRows]);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setIsDetailVisible(false);\r\n    }\r\n\r\n    function refreshContent(value: string) {\r\n        setCurrValue(value);\r\n    }\r\n\r\n    function load() {\r\n        axios.post(ApiUrlConfig.LOAD_PLATFORM_API_URL, {id: id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载平台api失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    const defineJson:ParameterDefineRow[] = JSON.parse(ret.data.defineJson || '[]');\r\n                    for (let i = 0; i < defineJson.length; i++) {\r\n                        defineJson[i]['key'] = RandomUtils.getKey();\r\n                        for (let j = 0; j < parametricList.length; j++) {\r\n                            if(defineJson[i].name === parametricList[j].name) {\r\n                                defineJson[i].defaultValue = parametricList[j].value;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    setParameterDefineRows(defineJson);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return (<div>\r\n        <CommonNameComments refreshTree={props.refreshTree} stepNode={props.stepNode} define={props.define}></CommonNameComments>\r\n        <div style={{paddingTop: '5px'}}>\r\n            <Table\r\n                columns={columns}\r\n                dataSource={parameterDefineRows}\r\n                pagination={false}\r\n                bordered\r\n                size=\"small\"\r\n            />\r\n        </div>\r\n        <Modal width={800} title=\"详细\" visible={isDetailVisible} onOk={handleOk} onCancel={handleCancel}>\r\n            <Row style={{paddingBottom: '5px'}}>\r\n                <Col flex=\"100px\">参数名称</Col>\r\n                <Col flex=\"auto\">\r\n                    <Input value={currKey} disabled={true}/>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{paddingBottom: '5px'}}>\r\n                <Col flex=\"100px\">参数值</Col>\r\n                <Col flex=\"auto\">\r\n                    <ContentEditor userDefinedVariables={props.userDefinedVariables} language={'sql'} content={currValue} refreshContent={refreshContent}></ContentEditor>\r\n                </Col>\r\n            </Row>\r\n        </Modal>\r\n    </div>)\r\n};\r\n\r\nexport {PlatformApiEditor}\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\autoplan\\AutoPlanEdit.tsx",["315","316","317"],"import React, {useEffect, useState} from \"react\";\r\nimport {Button, Form, Input, message, Select, Tabs, Tooltip, Radio} from \"antd\";\r\nimport {ArrowLeftOutlined} from \"@ant-design/icons\";\r\nimport {DataTypeEnum} from \"../../../entities/DataTypeEnum\";\r\nimport {CommonRemoteSearchMultiSelect} from \"../../common/components/CommonRemoteSearchMultiSelect\";\r\nimport axios from \"axios\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\nimport {RunEnvSelect} from \"../../testmanage/runenv/RunEnvSelect\";\r\nimport {PlanCaseEdit} from \"./PlanCaseEdit\";\r\nimport {ValueItem} from \"../../../entities/common/ValueItem\";\r\n\r\nconst Option = Select.Option;\r\nconst {TabPane} = Tabs;\r\n\r\ninterface AutoPlanModel {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    maxOccurs: number;\r\n    autoCaseRunTimeout: number;\r\n    runs: number;\r\n    envId: string | null;\r\n    failContinue: 0 | 1;\r\n}\r\n\r\ninterface IState {\r\n    id: number | null | undefined;\r\n    projectId: number | null;\r\n    setRenderRightFlag: any;\r\n}\r\n\r\nconst layout = {\r\n    labelCol: {span: 6},\r\n    wrapperCol: {span: 18},\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {offset: 8, span: 16},\r\n};\r\n\r\nconst initialValues: AutoPlanModel = {\r\n    name: '', description: '', type: \"1\",\r\n    maxOccurs: 100, autoCaseRunTimeout: 120, runs: 1, envId: null, failContinue: 1\r\n};\r\n\r\nconst AutoPlanEdit: React.FC<IState> = (props) => {\r\n    const [saving, setSaving] = useState(false);\r\n    const [projectId, setProjectId] = useState(props.projectId);\r\n    const [mailList, setMailList] = useState<ValueItem[]>([]);\r\n    const [id, setId] = useState(props.id);\r\n    const [runEnvId, setRunEnvId] = useState('');\r\n    const [form] = Form.useForm();\r\n    if (id !== props.id) {\r\n        setId(props.id);\r\n    }\r\n    useEffect(() => {\r\n        load();\r\n    }, [id]);\r\n\r\n\r\n    function back() {\r\n        props.setRenderRightFlag(DataTypeEnum.ALL);\r\n    }\r\n\r\n    function onFinish(values) {\r\n        values.mailList = mailList.map((row) => row.value).join(';');\r\n        values.id = id;\r\n        setSaving(true);\r\n        axios.post(ApiUrlConfig.SAVE_AUTO_PLAN_URL, values).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('保存失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            setSaving(false)\r\n        });\r\n    }\r\n\r\n    function onChangeTab() {\r\n\r\n    }\r\n\r\n    function load() {\r\n        axios.post(ApiUrlConfig.LOAD_AUTO_PLAN_URL, {id: id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    if (!ret.data) {\r\n                        return;\r\n                    }\r\n                    if (form) {\r\n                        form.setFieldsValue({\r\n                            name: ret.data.name,\r\n                            description: ret.data.description,\r\n                            type: ret.data.type.toString(),\r\n                            maxOccurs: ret.data.maxOccurs || 100,\r\n                            runs: ret.data.runs || 1,\r\n                            envId: ret.data.envId,\r\n                            failContinue: ret.data.failContinue === 0 ? 0 : 1\r\n                        });\r\n                        setRunEnvId(ret.data.envId.toString() || undefined);\r\n                    }\r\n                    const tempList: string[] = ret.data.mailList?.split(';') || [];\r\n                    const tempValueItemList: ValueItem[] = [];\r\n                    tempList.map(row => {\r\n                        tempValueItemList.push({value: row, label: row});\r\n                    });\r\n\r\n                    setMailList(tempValueItemList);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function runPlan() {\r\n        if (!window.confirm('确定运行该计划吗？')) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    function checkPlanResult() {\r\n\r\n    }\r\n\r\n    function runPlanWithGroup() {\r\n        if (!window.confirm('确定运行该计划吗？')) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    return (<div className=\"card\">\r\n        <div className=\"card-header card-header-divider\">\r\n            编辑自动化计划\r\n            <Tooltip title=\"返回\">\r\n                <Button onClick={back} type=\"primary\" size=\"small\" shape=\"circle\" icon={<ArrowLeftOutlined/>}/>\r\n            </Tooltip>\r\n            <span style={{float: 'right'}}>\r\n                <Button type=\"primary\" size=\"small\">全局变量配置</Button>\r\n                <Button className=\"margin-left5\" onClick={runPlan} type=\"default\" size=\"small\">运行计划</Button>\r\n                <Button className=\"margin-left5\" onClick={runPlanWithGroup} type=\"primary\" size=\"small\">组合运行</Button>\r\n                <Button className=\"margin-left5\" onClick={checkPlanResult} type=\"default\" size=\"small\">查看运行结果</Button>\r\n            </span>\r\n        </div>\r\n        <div className=\"card-body\">\r\n            <Tabs defaultActiveKey=\"1\" onChange={onChangeTab}>\r\n                <TabPane tab=\"基本信息\" key=\"1\">\r\n                    <div className=\"card-body stretch-left\">\r\n                        <Form\r\n                            {...layout}\r\n                            name=\"autoplan\"\r\n                            form={form}\r\n                            initialValues={initialValues}\r\n                            onFinish={onFinish}\r\n                        >\r\n                            <Form.Item\r\n                                label=\"名称\"\r\n                                name=\"name\"\r\n                                rules={[{required: true, message: '请输入名称!'}]}\r\n                            >\r\n                                <Input/>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item\r\n                                label=\"描述\"\r\n                                name=\"description\"\r\n                                rules={[{required: false}]}\r\n                            >\r\n                                <Input.TextArea rows={4}/>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item\r\n                                label=\"邮件接收\"\r\n                                name=\"mailList\"\r\n                                rules={[{required: false}]}\r\n                            >\r\n                                <CommonRemoteSearchMultiSelect onChange={setMailList} valueList={mailList}\r\n                                                               type={'user'}></CommonRemoteSearchMultiSelect>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item\r\n                                label=\"类型\"\r\n                                name=\"type\"\r\n                                rules={[{required: true, message: '请选择计划类型!'}]}\r\n                            >\r\n                                <Select style={{width: 150}}>\r\n                                    <Option value=\"1\">普通计划</Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item\r\n                                label=\"最大并发数\"\r\n                                name=\"maxOccurs\"\r\n                                rules={[{required: true, message: '请输入最大并发数!'}]}\r\n                            >\r\n                                <Input style={{width: 120}} type=\"number\" min={0} max={200}/>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item\r\n                                label=\"运行次数\"\r\n                                name=\"runs\"\r\n                                rules={[{required: true, message: '请输入计划运行次数!'}]}\r\n                            >\r\n                                <Input style={{width: 120}} type=\"number\" min={1} max={100}/>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item\r\n                                label=\"用例失败计划是否继续运行\"\r\n                                name=\"failContinue\"\r\n                                rules={[{required: true, message: '请输入计划运行次数!'}]}\r\n                            >\r\n                                <Radio.Group>\r\n                                    <Radio value={1}>是</Radio>\r\n                                    <Radio value={0}>否</Radio>\r\n                                </Radio.Group>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item\r\n                                label=\"运行环境\"\r\n                                name=\"envId\"\r\n                                rules={[{required: false}]}\r\n                            >\r\n                                <RunEnvSelect onChange={setRunEnvId} style={{width: '200px'}}\r\n                                              value={runEnvId}></RunEnvSelect>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item {...tailLayout}>\r\n                                <div className=\"fixed-bottom\">\r\n                                    <Button type=\"primary\" htmlType=\"submit\" loading={saving} style={{left: '70%'}}>\r\n                                        保存\r\n                                    </Button>\r\n                                </div>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </div>\r\n                </TabPane>\r\n                <TabPane tab=\"计划用例\" key=\"2\">\r\n                    <PlanCaseEdit projectId={projectId} planId={id}></PlanCaseEdit>\r\n                </TabPane>\r\n            </Tabs>\r\n\r\n        </div>\r\n    </div>)\r\n}\r\nexport {AutoPlanEdit}\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\cronjob\\CronJobList.tsx",["318"],"import React from 'react';\r\nimport {Table, Button, Tooltip, Radio} from 'antd';\r\nimport { Input } from 'antd';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport CommonListPage from \"../../common/CommonListPage\";\r\nimport {CommonApiUrlModel} from \"../../../entities/CommonApiUrlModel\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\nimport {OptionsConfig} from \"../../../config/options.config\";\r\n\r\nconst { Search } = Input;\r\n\r\nclass CronJobList extends CommonListPage {\r\n    constructor(props) {\r\n        super(props);\r\n        const commonApiUrlModel: CommonApiUrlModel = {\r\n            listUrl: ApiUrlConfig.QUERY_CRON_JOB_LIST_URL,\r\n            saveUrl: ApiUrlConfig.SAVE_CRON_JOB_URL,\r\n            deleteUrl: ApiUrlConfig.DELETE_CRON_JOB_URL,\r\n            loadUrl: ApiUrlConfig.LOAD_CRON_JOB_URL,\r\n            editUrl: '/cronjobedit/:id'\r\n        };\r\n        this.commonApiUrlModel = commonApiUrlModel;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadDataList(this.state.pagination);\r\n    }\r\n\r\n    onSearch = (value) => {\r\n        let filterConditionList =\r\n            [{\"columnName\": \"name\", \"value\":value},\r\n                {\"columnName\": \"id\", \"operator\": \"=\", \"value\":value}];\r\n        this._onSearch({searchValue: value}, filterConditionList);\r\n    }\r\n\r\n    onChange = (pagination, filters, sorter) => {\r\n        this.loadDataListSort(pagination, filters, sorter);\r\n        this.setState({sortedInfo: sorter});\r\n    }\r\n\r\n    onChangeQueryArea = (e) => {\r\n        this._onChangeQueryArea(e);\r\n        this._onSearch({searchValue: null, area: e.target.value}, null);\r\n    }\r\n\r\n    render() {\r\n        const columns: any[] = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'id',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '名称',\r\n                dataIndex: 'name',\r\n                render: (text, record) => <Button\r\n                    className=\"padding-left0\"\r\n                    size=\"small\"\r\n                    type=\"link\"\r\n                    onClick={() => this.edit(record.id)}>{text}</Button>,\r\n            },{\r\n                title: '创建者',\r\n                dataIndex: 'addUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建时间',\r\n                dataIndex: 'addTime',\r\n                key: 'add_time',\r\n                sorter: ()=>{},\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改者',\r\n                dataIndex: 'lastModifyUser',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改时间',\r\n                dataIndex: 'lastModifyTime',\r\n                key: 'last_modify_time',\r\n                sorter: ()=>{},\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '操作',\r\n                render: (text, record) => (\r\n                    <div>\r\n                        <Button className=\"padding-left0\" size=\"small\" type=\"link\" onClick={() => this.edit(record.id)}>修改</Button>\r\n                        <Button danger size=\"small\" type=\"link\" onClick={() => this.delete(record.id)}>删除</Button>\r\n                    </div>\r\n                ),\r\n            },\r\n        ];\r\n        const {area} = this.state.queryInfo;\r\n        return (<div className=\"card\">\r\n            <div className=\"card-header card-header-divider\">定时任务<span className=\"card-subtitle\">定时执行自动化计划</span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"list-toolbar\">\r\n                    <Search placeholder=\"Id或者名称\" onSearch={this.onSearch} enterButton\r\n                            onChange={this.onChangeSearchValue}\r\n                            style={{ width: 400,marginRight: '5px'}}/>\r\n                    <Radio.Group\r\n                        options={OptionsConfig.queryAreaOptions}\r\n                        onChange={this.onChangeQueryArea}\r\n                        value={area}\r\n                        optionType=\"button\"\r\n                        buttonStyle=\"solid\"\r\n                        style={{marginRight: '5px'}}\r\n                    />\r\n                    <Button type=\"primary\" onClick={() => this.edit(0)}>添加定时任务</Button>\r\n                </div>\r\n                <Table columns={columns}\r\n                       dataSource={this.state.data}\r\n                       size=\"small\"\r\n                       footer={() => '共' + this.state.pagination.total + '条数据'}\r\n                       loading={this.state.loading}\r\n                       pagination={this.state.pagination}\r\n                       onChange={this.onChange}\r\n                />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default withRouter(CronJobList);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\runenv\\RunEnvList.tsx",["319"],"import React from 'react';\r\nimport {Table, Button, Tooltip} from 'antd';\r\nimport { Input } from 'antd';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport CommonListPage from \"../../common/CommonListPage\";\r\nimport {CommonApiUrlModel} from \"../../../entities/CommonApiUrlModel\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\n\r\nconst { Search } = Input;\r\n\r\n\r\nclass RunEnvList extends CommonListPage {\r\n    constructor(props) {\r\n        super(props);\r\n        const commonApiUrlModel: CommonApiUrlModel = {\r\n            listUrl: ApiUrlConfig.QUERY_RUN_ENV_LIST_URL,\r\n            saveUrl: ApiUrlConfig.SAVE_RUN_ENV_URL,\r\n            deleteUrl: ApiUrlConfig.DELETE_RUN_ENV_URL,\r\n            loadUrl: ApiUrlConfig.LOAD_RUN_ENV_URL,\r\n            editUrl: '/runenvedit/:id'\r\n        };\r\n        this.commonApiUrlModel = commonApiUrlModel;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadDataListSort(this.state.pagination, null, null);\r\n    }\r\n\r\n    onSearch = (value) => {\r\n        let filterConditionList =\r\n            [{\"columnName\": \"name\", \"value\":value},\r\n                {\"columnName\": \"id\", \"operator\": \"=\", \"value\":value}];\r\n        this._onSearch({searchValue: value}, filterConditionList);\r\n    }\r\n\r\n    onChange = (pagination, filters, sorter) => {\r\n        this.loadDataListSort(pagination, filters, sorter);\r\n        this.setState({sortedInfo: sorter});\r\n    }\r\n\r\n    render() {\r\n        const columns: any[] = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                sorter: ()=>{},\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '名称',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                sorter: ()=>{},\r\n                render: (text, record) => <Button\r\n                    className=\"padding-left0\"\r\n                    size=\"small\"\r\n                    type=\"link\"\r\n                    onClick={() => this.edit(record.id)}>{text}</Button>,\r\n            },{\r\n                title: '描述',\r\n                dataIndex: 'description',\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建者',\r\n                dataIndex: 'addUser',\r\n                key: 'add_user',\r\n                sorter: ()=>{},\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '创建时间',\r\n                dataIndex: 'addTime',\r\n                key: 'add_time',\r\n                sorter: ()=>{},\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改者',\r\n                dataIndex: 'lastModifyUser',\r\n                key: 'last_modify_user',\r\n                sorter: ()=>{},\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '修改时间',\r\n                dataIndex: 'lastModifyTime',\r\n                key: 'last_modify_time',\r\n                sorter: ()=>{},\r\n                render: text => <span>{text}</span>,\r\n            },{\r\n                title: '操作',\r\n                render: (text, record) => (\r\n                    <div>\r\n                        <Button className=\"padding-left0\" size=\"small\" type=\"link\" onClick={() => this.edit(record.id)}>修改</Button>\r\n                        <Button danger size=\"small\" type=\"link\" onClick={() => this.delete(record.id)}>删除</Button>\r\n                    </div>\r\n                ),\r\n            },\r\n        ];\r\n        return (<div className=\"card\">\r\n            <div className=\"card-header card-header-divider\">运行环境<span className=\"card-subtitle\">计划运行环境配置</span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"list-toolbar\">\r\n                    <Search placeholder=\"Id或者名称\" onSearch={this.onSearch} enterButton style={{ width: 400,}}/>\r\n                    <Button type=\"primary\" onClick={() => this.edit(0)}>添加运行环境</Button>\r\n                </div>\r\n                <Table columns={columns}\r\n                       dataSource={this.state.data}\r\n                       size=\"small\"\r\n                       footer={() => '共' + this.state.pagination.total + '条数据'}\r\n                       loading={this.state.loading}\r\n                       pagination={this.state.pagination}\r\n                       onChange={this.onChange}\r\n                />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default withRouter(RunEnvList);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\runenv\\RunEnvEdit.tsx",["320"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {Form, Input, Button, Select, Tooltip, message} from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { FormInstance } from 'antd/lib/form';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\ninterface IProps {}\r\nconst { Option } = Select;\r\ntype RunEnvProps = IProps & RouteComponentProps;\r\n\r\ninterface RunEnvModel {\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\ninterface IState {\r\n    id: number;\r\n    ref: any;\r\n    saving: boolean;\r\n    initialValues: RunEnvModel;\r\n}\r\n\r\nconst layout = {\r\n    labelCol: { span: 6 },\r\n    wrapperCol: { span: 18 },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nclass RunEnvEdit extends React.Component<RunEnvProps, IState> {\r\n    constructor(props) {\r\n        super(props);\r\n        const ref = React.createRef<FormInstance>();\r\n        this.state = {\r\n            id: props.match.params.id,\r\n            ref: ref,\r\n            saving: false,\r\n            initialValues: {\r\n                name: '',\r\n                description: '',\r\n            }\r\n        }\r\n    }\r\n\r\n    onFinish = values => {\r\n        if(this.state.id > 0) {\r\n            values['id'] = this.state.id;\r\n        }\r\n        this.setState({saving: true});\r\n        axios.post(ApiUrlConfig.SAVE_RUN_ENV_URL, values).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('保存失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                    this.back();\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            this.setState({saving: false});\r\n        });\r\n    }\r\n\r\n    onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    componentDidMount() {\r\n        if(this.state.id > 0) {\r\n            axios.post(ApiUrlConfig.LOAD_RUN_ENV_URL, {id: this.state.id}).then(resp => {\r\n                if (resp.status !== 200) {\r\n                    message.error('加载失败');\r\n                } else {\r\n                    const ret = resp.data;\r\n                    if (ret.code !== 0) {\r\n                        message.error(ret.message);\r\n                    } else {\r\n                        if (!ret.data) {\r\n                            return;\r\n                        }\r\n                        this.state.ref.current.setFieldsValue({\r\n                            name: ret.data.name,\r\n                            description: ret.data.description\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    back() {\r\n        this.props.history.push('/runenvlist');\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"card\">\r\n            <div className=\"card-header card-header-divider\">\r\n                运行环境编辑\r\n                <Tooltip title=\"返回\">\r\n                    <Button onClick={() => this.back()} type=\"primary\" size=\"small\" shape=\"circle\" icon={<ArrowLeftOutlined />} />\r\n                </Tooltip>\r\n                <span className=\"card-subtitle\">管理员可配置</span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <Form\r\n                    {...layout}\r\n                    name=\"runenv\"\r\n                    ref={this.state.ref}\r\n                    initialValues={this.state.initialValues}\r\n                    onFinish={this.onFinish}\r\n                    onFinishFailed={this.onFinishFailed}\r\n                >\r\n                    <Form.Item\r\n                        label=\"名称\"\r\n                        name=\"name\"\r\n                        rules={[{required: true, message: '请输入环境名称!'}]}\r\n                    >\r\n                        <Input/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"描述\"\r\n                        name=\"description\"\r\n                        rules={[{required: true, message: '请输入环境描述!'}]}\r\n                    >\r\n                        <Input.TextArea rows={4}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={this.state.saving}>\r\n                            保存\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withRouter(RunEnvEdit);\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\runenv\\RunEnvSelect.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\autoplan\\PlanCaseEdit.tsx",["321"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Input, Button, Table, message, Modal} from 'antd';\r\nimport axios from \"axios\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\nimport {CommonNodeListPage} from \"../../common/CommonNodeListPage\";\r\nimport {DataTypeEnum} from \"../../../entities/DataTypeEnum\";\r\nimport moment from \"moment\";\r\n\r\nexport interface PlanCaseModel {\r\n    id: number;\r\n    planId: number;\r\n    caseId: number;\r\n    seq: number;\r\n}\r\n\r\ninterface IState {\r\n    planId: number | null | undefined;\r\n    projectId: number | null;\r\n}\r\n\r\nconst PlanCaseEdit: React.FC<IState> = (props) => {\r\n    const ref = useRef<{ setSelectedList, setTotalSelect }>(null);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [rows, setRows] = useState<PlanCaseModel[]>([]);\r\n    const [total, setTotal] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const [planId, setPlanId] = useState(props.planId);\r\n    const [selectedResourceIdList, setSelectedResourceIdList] = useState([]);\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r\n    const [currPlanCase, setCurrPlanCase] = useState<PlanCaseModel>();\r\n    const [seqValue, setSeqValue] = useState('');\r\n\r\n    const [pagination, setPagination] = useState({\r\n        current: 1,\r\n        pageNum: 1,\r\n        pageSize: 10,\r\n        total: 0,\r\n    });\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [isChangeCaseSeqModalVisible, setIsChangeCaseSeqModalVisible] = useState(false);\r\n    const [projectId, setProjectId] = useState(props.projectId);\r\n\r\n    if (planId !== props.planId) {\r\n        setPlanId(props.planId);\r\n    }\r\n    if (projectId !== props.projectId) {\r\n        setProjectId(props.projectId);\r\n    }\r\n\r\n    useEffect(() => {\r\n        onSearch();\r\n    }, [planId, pagination.pageSize, pagination.pageNum]);\r\n\r\n    function onSearch() {\r\n        setLoading(true);\r\n        const filterConditionList =\r\n            [{\"columnName\": \"case_id\", \"operator\": \"=\", \"value\": searchValue},\r\n                {\"columnName\": \"case_name\", \"value\": searchValue}];\r\n        const data = {\r\n            pageNum: pagination.pageNum,\r\n            pageSize: pagination.pageSize,\r\n            order: 'seq', sort: 'asc', planId: planId\r\n        };\r\n        if (searchValue.trim() !== '') {\r\n            data['filterConditionList'] = filterConditionList;\r\n        }\r\n        axios.post(ApiUrlConfig.QUERY_PLAN_CASE_LIST_URL, data).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    if (!ret.data) {\r\n                        return;\r\n                    }\r\n                    const respRows = ret.data.rows || [];\r\n                    for (let i = 0; i < respRows.length; i++) {\r\n                        respRows[i].key = respRows[i].id;\r\n                        respRows[i].caseCreateTime =\r\n                            respRows[i].caseCreateTime\r\n                            && moment(new Date(respRows[i].caseCreateTime)).format('YYYY-MM-DD HH:mm:ss');\r\n                    }\r\n                    setRows(respRows);\r\n                    setTotal(ret.data.total);\r\n                    pagination.total = ret.data.total;\r\n                    setPagination(pagination);\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    function onPressEnter(e) {\r\n        onSearch();\r\n    }\r\n\r\n    function onChange(e) {\r\n        setSearchValue(e.target.value);\r\n    }\r\n\r\n    function onChangeSeqValue(e) {\r\n        setSeqValue(e.target.value);\r\n    }\r\n\r\n    function changeCaseSeq(planCase: PlanCaseModel) {\r\n        setCurrPlanCase(planCase);\r\n        setSeqValue('');\r\n        setIsChangeCaseSeqModalVisible(true);\r\n    }\r\n\r\n    function handleOk() {\r\n        if (selectedResourceIdList.length < 1) {\r\n            setIsModalVisible(false);\r\n            return;\r\n        }\r\n        setConfirmLoading(true);\r\n        axios.post(ApiUrlConfig.ADD_CASE_TO_PLAN_URL,\r\n            {planId: planId, caseIdList: selectedResourceIdList}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                    setIsModalVisible(false);\r\n                    onSearch();\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            setConfirmLoading(false);\r\n        });\r\n    }\r\n\r\n    function handleCancel() {\r\n        setIsModalVisible(false);\r\n        setSelectedResourceIdList([]);\r\n    }\r\n\r\n    function editCase(record: PlanCaseModel) {\r\n\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: '序号',\r\n            dataIndex: 'seq',\r\n            render: text => <span>{text}</span>,\r\n        }, {\r\n            title: '用例id',\r\n            dataIndex: 'caseId',\r\n            render: text => <span>{text}</span>,\r\n        }, {\r\n            title: '名称',\r\n            dataIndex: 'caseName',\r\n            render: text => <span>{text}</span>,\r\n        }, {\r\n            title: '创建者',\r\n            dataIndex: 'caseCreateUsername',\r\n            render: text => <span>{text}</span>,\r\n        }, {\r\n            title: '创建时间',\r\n            dataIndex: 'caseCreateTime',\r\n            render: text => <span>{text}</span>,\r\n        }, {\r\n            title: '操作',\r\n            render: (text, record) => (\r\n                <div>\r\n                    <Button className=\"padding-left0\" size=\"small\" type=\"link\"\r\n                            onClick={() => changeCaseSeq(record)}>调整序号</Button>\r\n                    <Button size=\"small\" type=\"link\" onClick={() => editCase(record)}>编辑</Button>\r\n                </div>\r\n            ),\r\n        },\r\n    ];\r\n    const rowSelection = {\r\n        onChange: (selectedRowKeys: React.Key[], selectedRows: PlanCaseModel[]) => {\r\n            //console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\r\n            setSelectedRowKeys(selectedRowKeys);\r\n        },\r\n    };\r\n\r\n    function onChangePagination(pagination) {\r\n\r\n        setPagination({\r\n            ...pagination,\r\n            pageNum: pagination.current,\r\n            pageSize: pagination.pageSize,\r\n            current: pagination.current,\r\n        });\r\n    }\r\n\r\n    function onAddCase() {\r\n        setIsModalVisible(true);\r\n        if (ref && ref.current) {\r\n            ref.current?.setSelectedList([]);\r\n            ref.current?.setTotalSelect(0);\r\n        }\r\n    }\r\n\r\n    function onClearPlanCase() {\r\n        if (!window.confirm('确定清空吗?')) {\r\n            return;\r\n        }\r\n        axios.post(ApiUrlConfig.CLEAR_PLAN_CASE_URL, {id: planId}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('清空失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                    onSearch();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function onDeletePlanCase() {\r\n        if (!window.confirm('确定删除吗?')) {\r\n            return;\r\n        }\r\n        axios.post(ApiUrlConfig.DELETE_PLAN_CASE_URL,\r\n            {planId: planId, idList: selectedRowKeys}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('删除失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                    onSearch();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleOkChangeCaseSeq() {\r\n        axios.post(ApiUrlConfig.CHANGE_CASE_SEQ_URL,\r\n            {planId: planId, caseId: currPlanCase?.caseId, seq: seqValue}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('调整失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    message.success('操作成功');\r\n                    onSearch();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleCancelChangeCaseSeq() {\r\n        setIsChangeCaseSeqModalVisible(false);\r\n    }\r\n\r\n    return (<div>\r\n        <div className=\"list-toolbar\">\r\n            <Input placeholder=\"用例id/名称\" onPressEnter={onPressEnter}\r\n                   onChange={onChange} value={searchValue} style={{width: 300,}}/>\r\n            <Button className=\"margin-left5\" type=\"primary\" onClick={onSearch}>搜索</Button>\r\n            <Button className=\"margin-left5\" type=\"primary\" onClick={onAddCase}>添加用例</Button>\r\n            <Button className=\"margin-left5\" type=\"primary\" danger={true} onClick={onDeletePlanCase}>删除用例</Button>\r\n            <Button className=\"margin-left5\" type=\"primary\" danger={true} onClick={onClearPlanCase}>清空用例</Button>\r\n        </div>\r\n        <div>\r\n            <Table columns={columns}\r\n                   rowSelection={{\r\n                       type: 'checkbox',\r\n                       ...rowSelection,\r\n                   }}\r\n                   dataSource={rows}\r\n                   size=\"small\"\r\n                   footer={() => '共' + total + '条数据'}\r\n                   loading={loading}\r\n                   pagination={pagination}\r\n                   onChange={onChangePagination}\r\n            />\r\n        </div>\r\n        <Modal width={1200}\r\n               title=\"用例选择\"\r\n               confirmLoading={confirmLoading}\r\n               visible={isModalVisible}\r\n               onOk={handleOk}\r\n               onCancel={handleCancel}>\r\n            <CommonNodeListPage\r\n                ref={ref}\r\n                setSelectedResourceIdList={setSelectedResourceIdList}\r\n                isResourceSelect={true}\r\n                setNodeId={null}\r\n                setRenderRightFlag={null}\r\n                projectId={projectId}\r\n                dataTypeId={DataTypeEnum.AUTO_CASE}>\r\n            </CommonNodeListPage>\r\n        </Modal>\r\n        <Modal title=\"调整用例位置\" visible={isChangeCaseSeqModalVisible}\r\n               onOk={handleOkChangeCaseSeq}\r\n               onCancel={handleCancelChangeCaseSeq}>\r\n            <Input placeholder=\"输入用例位置\" value={seqValue} onChange={onChangeSeqValue}/>\r\n        </Modal>\r\n    </div>)\r\n}\r\n\r\nexport {PlanCaseEdit}\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\cronjob\\CronJobEdit.tsx",["322"],"import React, {useEffect, useState} from \"react\";\r\nimport {Button, Form, Input, Tooltip, Row, Col, Modal, message, Select, Popconfirm} from \"antd\";\r\nimport {ArrowLeftOutlined, QuestionCircleOutlined} from \"@ant-design/icons\";\r\nimport {FormInstance} from \"antd/lib/form\";\r\nimport axios from \"axios\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\nimport {CommonRemoteSearchSingleSelect} from \"../../common/components/CommonRemoteSearchSingleSelect\";\r\nimport {DataTypeEnum} from \"../../../entities/DataTypeEnum\";\r\nimport {RunEnvSelect} from \"../runenv/RunEnvSelect\";\r\nimport {RandomUtils} from \"../../../utils/RandomUtils\";\r\nconst Option = Select.Option;\r\n\r\ninterface CronJobPlanRelation {\r\n    id: number|null;\r\n    planCronJobId: number|null;\r\n    planId: number|null;\r\n    envId: string|number|null;\r\n    runType: number|null;\r\n    key?: string;\r\n}\r\n\r\ninterface IState {\r\n    id: number|null|undefined;\r\n}\r\n\r\nconst layout = {\r\n    labelCol: { span: 6 },\r\n    wrapperCol: { span: 18 },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nconst initialValues = {};\r\nconst leftSpanSize = 8;\r\nconst rightSpanSize = 16;\r\n\r\nconst CronJobEdit: React.FC<IState> = (props) => {\r\n    const jobId = (props as any).match.params.id;\r\n\r\n    const [id, setId] = useState(jobId);\r\n    const [saving, setSaving] = useState(false);\r\n    const [visibleCronExpressionDescription, setVisibleCronExpressionDescription] = useState(false);\r\n    const [visibleExpressionDates, setVisibleExpressionDates] = useState(false);\r\n    const [ref] = useState(React.createRef<FormInstance>());\r\n    const [expression, setExpression] = useState('');\r\n    const [cronDates, setCronDates] = useState<string[]>([]);\r\n    const [planRows, setPlanRows] = useState<CronJobPlanRelation[]>([]);\r\n\r\n    useEffect(() => {\r\n        load();\r\n    }, [id]);\r\n\r\n    function onFinish(values) {\r\n        values.cronExpression = expression;\r\n        values.planList = planRows;\r\n        values.id = id;\r\n        setSaving(true);\r\n        axios.post(ApiUrlConfig.SAVE_CRON_JOB_URL, values).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('操作失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    setId(ret.data);\r\n                    message.success('操作成功');\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            setSaving(false);\r\n        });\r\n    }\r\n\r\n    function load() {\r\n        if(!id || id < 1 || id === '0') {\r\n            return ;\r\n        }\r\n        axios.post(ApiUrlConfig.LOAD_PLAN_CRON_JOB_URL, {id: id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    ref.current?.setFieldsValue({\r\n                        name: ret.data.name,\r\n                        description: ret.data.description\r\n                    });\r\n                    setExpression(ret.data.cronExpression);\r\n                    setPlanRows(ret.data.planList);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function back() {\r\n        window.history.go(-1);\r\n    }\r\n\r\n    function onCheckExpression() {\r\n        if(!expression) {\r\n            message.info('请输入表达式');\r\n            return;\r\n        }\r\n        axios.post(ApiUrlConfig.CHECK_CRON_EXPRESSION_URL, {expression: expression}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('校验失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error('校验失败: ' + ret.message);\r\n                } else {\r\n                    if (!ret.data) {\r\n                        message.info('近期没有可执行时间');\r\n                    }else{\r\n                        setCronDates(ret.data);\r\n                        setVisibleExpressionDates(true);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleClose() {\r\n        setVisibleCronExpressionDescription(false);\r\n        setVisibleExpressionDates(false);\r\n    }\r\n\r\n    function showExpressionDesc() {\r\n        setVisibleCronExpressionDescription(true);\r\n    }\r\n\r\n    function renderDates() {\r\n        const ps = cronDates.map(function (row, index) {\r\n           return <p key={index}>{row}</p>\r\n        });\r\n        return (<div>{ps}\r\n        </div>);\r\n    }\r\n\r\n    function onAddPlan() {\r\n        planRows.push({id: null, planId: null, planCronJobId: id || null, envId: null, runType: 1, key: RandomUtils.getKey()});\r\n        setPlanRows([...planRows]);\r\n    }\r\n\r\n    function handleRunTypeChange(value, row: CronJobPlanRelation) {\r\n        row.runType = value;\r\n        setPlanRows([...planRows]);\r\n    }\r\n\r\n    function handlePlanChange(value, row: CronJobPlanRelation) {\r\n        row.planId = value;\r\n        setPlanRows([...planRows]);\r\n    }\r\n\r\n    function handleRunEnvChange(value, row: CronJobPlanRelation) {\r\n        row.envId = value;\r\n        setPlanRows([...planRows]);\r\n    }\r\n\r\n    function removeRow(index) {\r\n        if(planRows[index]) {\r\n            planRows.splice(index, 1);\r\n        }\r\n        setPlanRows([...planRows]);\r\n    }\r\n\r\n    function renderPlanRows() {\r\n        const rows = planRows && planRows.map(function (row, index) {\r\n            let defaultValue = '1';\r\n            if(row.runType) {\r\n                defaultValue = row.runType.toString();\r\n            }\r\n            return (\r\n            <Row className=\"description-row\" key={row.key}>\r\n                <Col span={8} className=\"padding-right5\">\r\n                    <CommonRemoteSearchSingleSelect\r\n                        onChange={(v) => {handlePlanChange(v, row);}}\r\n                        type={'resource'}\r\n                        value={(row.planId && row.planId.toString()) || undefined}\r\n                        dataTypeId={DataTypeEnum.AUTO_PLAN}></CommonRemoteSearchSingleSelect>\r\n                </Col>\r\n                <Col span={8} className=\"padding-right5\">\r\n                    <RunEnvSelect value={row.envId} onChange={(v) => {handleRunEnvChange(v, row);}}></RunEnvSelect>\r\n                </Col>\r\n                <Col span={8}>\r\n                    <div style={{display: 'flex', alignItems: 'center'}}>\r\n                        <Select\r\n                            style={{marginRight: '5px'}}\r\n                            defaultValue={defaultValue}\r\n                            onChange={(value) => {handleRunTypeChange(value, row);}}>\r\n                            <Option value=\"1\">非组合</Option>\r\n                            <Option value=\"2\">组合</Option>\r\n                        </Select>\r\n                        <Popconfirm\r\n                            title=\"确定删除吗?\"\r\n                            onConfirm={() => {removeRow(index);}}\r\n                            okText=\"Yes\"\r\n                            cancelText=\"No\"\r\n                        >\r\n                            <a href=\"#\" style={{width: '30px'}}>删除</a>\r\n                        </Popconfirm>\r\n                    </div>\r\n                </Col>\r\n            </Row>)\r\n        });\r\n        return (<div>{rows}</div>)\r\n    }\r\n\r\n    function onChangeExpression(e) {\r\n        setExpression(e.target.value);\r\n    }\r\n\r\n    return (<div className=\"card\">\r\n        <div className=\"card-header card-header-divider\">\r\n            定时任务编辑\r\n            <Tooltip title=\"返回\">\r\n                <Button onClick={() => back()} type=\"primary\" size=\"small\" shape=\"circle\" icon={<ArrowLeftOutlined />} />\r\n            </Tooltip>\r\n            <span className=\"card-subtitle\">配置定时执行自动化计划</span>\r\n        </div>\r\n        <div className=\"card-body\">\r\n            <Form\r\n                {...layout}\r\n                name=\"cronjob\"\r\n                ref={ref}\r\n                initialValues={initialValues}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"名称\"\r\n                    name=\"name\"\r\n                    rules={[{required: true, message: '请输入名称!'}]}\r\n                >\r\n                    <Input/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"描述\"\r\n                    name=\"description\"\r\n                    rules={[{required: true, message: '请输入描述!'}]}\r\n                >\r\n                    <Input.TextArea rows={4}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"定时表达式\"\r\n                    name=\"cronExpression\"\r\n                    rules={[{required: false, message: '请输入定时表达式!'}]}\r\n                >\r\n                    <Input placeholder=\"如每天的3点15执行，0 15 3 * * ?\" style={{width: '250px'}} value={expression} onChange={onChangeExpression}/>\r\n                    <Button type=\"primary\" className=\"margin-left5\" onClick={onCheckExpression}>\r\n                        校验表达式\r\n                    </Button>\r\n                    <span className=\"span-icon-btn\" onClick={showExpressionDesc}><QuestionCircleOutlined /></span>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"计划配置\"\r\n                    name=\"planList\"\r\n                    rules={[{required: false, message: '请配置计划!'}]}\r\n                >\r\n                    <Input style={{display: 'none'}}/>\r\n                    <div>\r\n                        <Row className=\"common-header\">\r\n                            <Col span={8}>计划</Col>\r\n                            <Col span={8}>环境</Col>\r\n                            <Col span={8}>运行方式\r\n                                <Button onClick={onAddPlan} type=\"primary\" size=\"small\" style={{float: 'right'}}>添加计划</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    {renderPlanRows()}\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    <div className=\"fixed-bottom\">\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={saving} style={{left: '70%'}}>\r\n                            保存\r\n                        </Button>\r\n                    </div>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n        <Modal\r\n            width={600}\r\n            visible={visibleCronExpressionDescription}\r\n            onCancel={handleClose}\r\n            title=\"表达式说明\"\r\n            footer={[\r\n                <Button key=\"close\" onClick={handleClose}>\r\n                    关闭\r\n                </Button>,\r\n            ]}\r\n        >\r\n            <h4>格式：</h4>\r\n            <p>[秒] [分] [小时] [日] [月] [周] [年]</p>\r\n            <h4>例子：</h4>\r\n            <div>\r\n                <Row className=\"common-header\">\r\n                    <Col span={leftSpanSize}>表达式</Col>\r\n                    <Col span={rightSpanSize}>说明</Col>\r\n                </Row>\r\n                <Row className=\"description-row\">\r\n                    <Col span={leftSpanSize}>0 0 12 * * ?</Col>\r\n                    <Col span={rightSpanSize}>每天12点运行</Col>\r\n                </Row>\r\n                <Row className=\"description-row\">\r\n                    <Col span={leftSpanSize}>0 15 10 * * ?</Col>\r\n                    <Col span={rightSpanSize}>每天10点15分运行</Col>\r\n                </Row>\r\n                <Row className=\"description-row\">\r\n                    <Col span={leftSpanSize}>0 */5 * * * ?</Col>\r\n                    <Col span={rightSpanSize}>每天每5分钟的0秒运行</Col>\r\n                </Row>\r\n                <Row className=\"description-row\">\r\n                    <Col span={leftSpanSize}>0 0 */5 * * ?</Col>\r\n                    <Col span={rightSpanSize}>每天每5个小时的0分0秒运行</Col>\r\n                </Row>\r\n                <Row className=\"description-row\">\r\n                    <Col span={leftSpanSize}>30 10 5,10,15 * * ?</Col>\r\n                    <Col span={rightSpanSize}>每天的5点、10点和15点10分30秒运行</Col>\r\n                </Row>\r\n                <Row className=\"description-row\">\r\n                    <Col span={leftSpanSize}>0 0-10 15 * * ?</Col>\r\n                    <Col span={rightSpanSize}>每天的15:00到15:10，每分钟运行一次</Col>\r\n                </Row>\r\n                <Row className=\"description-row\">\r\n                    <Col span={leftSpanSize}>0 10 15 15 * ?</Col>\r\n                    <Col span={rightSpanSize}>每月15日15点10分运行一次</Col>\r\n                </Row>\r\n            </div>\r\n        </Modal>\r\n        <Modal\r\n            width={600}\r\n            onCancel={handleClose}\r\n            visible={visibleExpressionDates}\r\n            title=\"近期运行时间列表\"\r\n            footer={[\r\n                <Button key=\"close\" onClick={handleClose}>\r\n                    关闭\r\n                </Button>,\r\n            ]}\r\n        >\r\n            {renderDates()}\r\n        </Modal>\r\n    </div>)\r\n}\r\nexport {CronJobEdit}\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\components\\CommonRemoteSearchMultiSelect.tsx",["323"],"import { Select, Spin, message } from 'antd';\r\nimport { SelectProps } from 'antd/es/select';\r\nimport debounce from 'lodash/debounce';\r\nimport React, {useState} from \"react\";\r\nimport {ApiUrlConfig, BaseUrl} from \"../../../config/api.url\";\r\nimport axios from \"axios\";\r\nimport {ValueItem} from \"../../../entities/common/ValueItem\";\r\n\r\nexport interface DebounceSelectProps<ValueType = any>\r\n    extends Omit<SelectProps<ValueType>, 'options' | 'children'> {\r\n    fetchOptions: (search: string) => Promise<ValueType[]>;\r\n    debounceTimeout?: number;\r\n}\r\n\r\nfunction DebounceSelect<\r\n    ValueType extends { key?: string; label: React.ReactNode; value: string | number } = any\r\n    >({ fetchOptions, debounceTimeout = 800, ...props }: DebounceSelectProps) {\r\n    const [fetching, setFetching] = React.useState(false);\r\n    const [options, setOptions] = React.useState<ValueType[]>([]);\r\n    const fetchRef = React.useRef(0);\r\n\r\n    const debounceFetcher = React.useMemo(() => {\r\n        const loadOptions = (value: string) => {\r\n            fetchRef.current += 1;\r\n            const fetchId = fetchRef.current;\r\n            setOptions([]);\r\n            setFetching(true);\r\n\r\n            fetchOptions(value).then(newOptions => {\r\n                if (fetchId !== fetchRef.current) {\r\n                    // for fetch callback order\r\n                    return;\r\n                }\r\n\r\n                setOptions(newOptions);\r\n                setFetching(false);\r\n            });\r\n        };\r\n\r\n        return debounce(loadOptions, debounceTimeout);\r\n    }, [fetchOptions, debounceTimeout]);\r\n\r\n    return (\r\n        <Select<ValueType>\r\n            labelInValue\r\n            filterOption={false}\r\n            onSearch={debounceFetcher}\r\n            notFoundContent={fetching ? <Spin size=\"small\" /> : null}\r\n            {...props}\r\n            options={options}\r\n        />\r\n    );\r\n}\r\n\r\ninterface IState {\r\n    valueList: ValueItem[];\r\n    type: 'user'|'resource';\r\n    dataTypeId?: number;\r\n    mode?: \"multiple\" | \"tags\" | undefined;\r\n    onChange: any;\r\n}\r\n\r\nconst CommonRemoteSearchMultiSelect: React.FC<IState> = (props) => {\r\n    const [value, setValue] = useState<ValueItem[]>(props.valueList);\r\n    const {onChange} = props;\r\n    let placeholder;\r\n    const [type, setType] = useState(props.type);\r\n    const [dataTypeId, setDataTypeId] = useState(props.dataTypeId);\r\n    const [mode, setMode] = useState<\"multiple\" | \"tags\" | undefined>(props.mode || 'multiple');\r\n\r\n    if(type !== props.type) {\r\n        setType(props.type);\r\n    }\r\n    if(JSON.stringify(value) !== JSON.stringify(props.valueList)) {\r\n        setValue(props.valueList);\r\n    }\r\n\r\n    if(dataTypeId !== props.dataTypeId) {\r\n        setDataTypeId(props.dataTypeId);\r\n    }\r\n\r\n    if(mode !== (props.mode||'multiple')) {\r\n        setMode(props.mode);\r\n    }\r\n\r\n    if(type === 'user') {\r\n        placeholder = '输入英文名或中文名搜索';\r\n    }else if(type === 'resource') {\r\n        placeholder = '输入id或名称搜索';\r\n    }\r\n\r\n    async function fetchDataList(searchValue: string): Promise<ValueItem[]> {\r\n        let json: any = {pageNum: 1, pageSize: 50,\r\n            linkOperator:\"or\", filterConditionList:[{columnName: \"username\", operator: \"like\", value: searchValue},\r\n                {columnName:\"chinese_name\", operator: \"like\", value: searchValue}]};\r\n\r\n        let url = ApiUrlConfig.FIND_USER_URL;\r\n        if(type === 'resource') {\r\n            json = {\r\n                pageSize:50,\r\n                pageNum:1,\r\n                dataTypeId: dataTypeId,\r\n                linkOperator: \"or\",\r\n                filterConditionList:[\r\n                    {\r\n                        columnName: \"name\",\r\n                        operator: \"like\",\r\n                        value: searchValue\r\n                    },\r\n                    {columnName: \"id\",\r\n                        operator: \"=\",\r\n                        value: searchValue}]\r\n            };\r\n            url = ApiUrlConfig.QUERY_NODE_LIST_URL;\r\n        }\r\n        return await new Promise<ValueItem[]>((resolve,reject) => {\r\n            axios.post(url, json).then((res) => {\r\n                if(res.data.code !== 0) {\r\n                    message.error(res.data.message);\r\n                    resolve([]);\r\n                }else if(type === 'user') {\r\n                    resolve(res.data.data.map(\r\n                        (row) => ({\r\n                            label: `${row.username}(${row.chineseName})`,\r\n                            value: `${row.username}(${row.chineseName})`,\r\n                        })));\r\n                }else if(type === 'resource') {\r\n                    const rows = (res.data.data && res.data.data.rows) || [];\r\n                    resolve(rows.map(\r\n                        (row) => ({\r\n                            label: `${row.id}(${row.name})`,\r\n                            value: `${row.id}`,\r\n                        })));\r\n                }\r\n            }).catch((error) => {\r\n                resolve([]);\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChangeSelectValue(newValue) {\r\n        setValue(newValue);\r\n        onChange(newValue);\r\n    }\r\n\r\n    return (\r\n        <DebounceSelect\r\n            mode={mode}\r\n            value={value}\r\n            placeholder={placeholder}\r\n            fetchOptions={fetchDataList}\r\n            onChange={onChangeSelectValue}\r\n            style={{ width: '100%' }}\r\n        />\r\n    );\r\n};\r\n\r\nexport {CommonRemoteSearchMultiSelect};\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\common\\components\\CommonRemoteSearchSingleSelect.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\config\\options.config.ts",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\urlconfig\\UrlConfigList.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\urlconfig\\UrlConfigEdit.tsx",["324","325","326","327"],"import React, {useEffect, useState} from \"react\";\r\nimport {Button, Col, Form, Input, message, Row, Tooltip} from \"antd\";\r\nimport {ArrowLeftOutlined, QuestionCircleOutlined} from \"@ant-design/icons\";\r\nimport {FormInstance} from \"antd/lib/form\";\r\nimport {RunEnvSelect} from \"../runenv/RunEnvSelect\";\r\nimport axios from \"axios\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\nconst layout = {\r\n    labelCol: { span: 6 },\r\n    wrapperCol: { span: 18 },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n};\r\nconst initialValues = {};\r\n\r\ninterface IState {\r\n\r\n}\r\nconst UrlConfigEdit: React.FC<IState> = (props) => {\r\n    const configId = (props as any).match.params.id;\r\n    const [id, setId] = useState(configId);\r\n    const [saving, setSaving] = useState(false);\r\n    const [ref] = useState(React.createRef<FormInstance>());\r\n    const [runEnvId, setRunEnvId] = useState('');\r\n\r\n    useEffect(() => {\r\n        load();\r\n    }, [id]);\r\n    function back() {\r\n        window.history.go(-1);\r\n    }\r\n\r\n    function load() {\r\n        if (!id || id < 1 || id === '0') {\r\n            return;\r\n        }\r\n        axios.post(ApiUrlConfig.LOAD_URL_CONFIG_URL, {id: id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    ref.current?.setFieldsValue({\r\n                        url: ret.data.url,\r\n                        ip: ret.data.ip,\r\n                        port: ret.data.port,\r\n                        envId: ret.data.envId\r\n                    });\r\n                    setRunEnvId(ret.data.envId.toString() || undefined);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function onFinish(values) {\r\n        values.id = id;\r\n        setSaving(true);\r\n        axios.post(ApiUrlConfig.SAVE_URL_CONFIG_URL, values).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('操作失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    setId(ret.data);\r\n                    message.success('操作成功');\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            setSaving(false);\r\n        });\r\n    }\r\n\r\n    return (<div className=\"card\">\r\n        <div className=\"card-header card-header-divider\">\r\n            接口地址配置\r\n            <Tooltip title=\"返回\">\r\n                <Button onClick={() => back()} type=\"primary\" size=\"small\" shape=\"circle\" icon={<ArrowLeftOutlined />} />\r\n            </Tooltip>\r\n            <span className=\"card-subtitle\">接口路径、IP和端口配置</span>\r\n        </div>\r\n        <div className=\"card-body\">\r\n            <Form\r\n                {...layout}\r\n                name=\"cronjob\"\r\n                ref={ref}\r\n                initialValues={initialValues}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"接口路径\"\r\n                    name=\"url\"\r\n                    rules={[{required: true, message: '请输入接口路径!'}]}\r\n                >\r\n                    <Input style={{width: '300px'}} placeholder=\"如：/user/save\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"ip\"\r\n                    name=\"ip\"\r\n                    rules={[{required: true, message: '请输入ip!'}]}\r\n                >\r\n                    <Input style={{width: '200px'}} placeholder=\"如：192.168.1.121\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"port\"\r\n                    name=\"port\"\r\n                    rules={[{required: true, message: '请输入端口!'}]}\r\n                >\r\n                    <Input style={{width: '150px'}} placeholder=\"如：8080\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"运行环境\"\r\n                    name=\"envId\"\r\n                    rules={[{required: true, message: '请选择环境!'}]}\r\n                >\r\n                    <RunEnvSelect onChange={setRunEnvId} style={{width: '200px'}} value={runEnvId}></RunEnvSelect>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    <div className=\"fixed-bottom\">\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={saving} style={{left: '70%'}}>\r\n                            保存\r\n                        </Button>\r\n                    </div>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    </div>);\r\n}\r\nexport {UrlConfigEdit}\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\dbconfig\\DbConfigEdit.tsx",["328","329","330","331"],"import React, {useEffect, useState} from \"react\";\r\nimport {Button, Col, Form, Input, message, Row, Tooltip, Select} from \"antd\";\r\nimport {ArrowLeftOutlined, QuestionCircleOutlined} from \"@ant-design/icons\";\r\nimport {FormInstance} from \"antd/lib/form\";\r\nimport {RunEnvSelect} from \"../runenv/RunEnvSelect\";\r\nimport axios from \"axios\";\r\nimport {ApiUrlConfig} from \"../../../config/api.url\";\r\nconst layout = {\r\n    labelCol: { span: 6 },\r\n    wrapperCol: { span: 18 },\r\n};\r\nconst Option = Select.Option;\r\n\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n};\r\nconst initialValues = {};\r\n\r\ninterface IState {\r\n\r\n}\r\n\r\nconst DbConfigEdit: React.FC<IState> = (props) => {\r\n    const configId = (props as any).match.params.id;\r\n    const [id, setId] = useState(configId);\r\n    const [saving, setSaving] = useState(false);\r\n    const [ref] = useState(React.createRef<FormInstance>());\r\n    const [runEnvId, setRunEnvId] = useState('');\r\n\r\n    useEffect(() => {\r\n        load();\r\n    }, [id]);\r\n    function back() {\r\n        window.history.go(-1);\r\n    }\r\n\r\n    function load() {\r\n        if (!id || id < 1 || id === '0') {\r\n            return;\r\n        }\r\n        axios.post(ApiUrlConfig.LOAD_DB_CONFIG_URL, {id: id}).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('加载失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    ref.current?.setFieldsValue({\r\n                        dbName: ret.data.dbName,\r\n                        ip: ret.data.ip,\r\n                        port: ret.data.port,\r\n                        username: ret.data.username,\r\n                        password: ret.data.password,\r\n                        envId: ret.data.envId,\r\n                        type: ret.data.type.toString()\r\n                    });\r\n                    setRunEnvId(ret.data.envId.toString() || undefined);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function onFinish(values) {\r\n        values.id = id;\r\n        setSaving(true);\r\n        axios.post(ApiUrlConfig.SAVE_DB_CONFIG_URL, values).then(resp => {\r\n            if (resp.status !== 200) {\r\n                message.error('操作失败');\r\n            } else {\r\n                const ret = resp.data;\r\n                if (ret.code !== 0) {\r\n                    message.error(ret.message);\r\n                } else {\r\n                    setId(ret.data);\r\n                    message.success('操作成功');\r\n                }\r\n            }\r\n        }).finally(() => {\r\n            setSaving(false);\r\n        });\r\n    }\r\n\r\n    return (<div className=\"card\">\r\n        <div className=\"card-header card-header-divider\">\r\n            数据库配置\r\n            <Tooltip title=\"返回\">\r\n                <Button onClick={() => back()} type=\"primary\" size=\"small\" shape=\"circle\" icon={<ArrowLeftOutlined />} />\r\n            </Tooltip>\r\n            <span className=\"card-subtitle\">数据库IP和端口等配置</span>\r\n        </div>\r\n        <div className=\"card-body\">\r\n            <Form\r\n                {...layout}\r\n                name=\"cronjob\"\r\n                ref={ref}\r\n                initialValues={initialValues}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"数据库名\"\r\n                    name=\"dbName\"\r\n                    rules={[{required: true, message: '请输入数据库名!'}]}\r\n                >\r\n                    <Input style={{width: '300px'}}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"ip\"\r\n                    name=\"ip\"\r\n                    rules={[{required: true, message: '请输入ip!'}]}\r\n                >\r\n                    <Input style={{width: '200px'}} placeholder=\"如：192.168.1.121\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"port\"\r\n                    name=\"port\"\r\n                    rules={[{required: true, message: '请输入端口!'}]}\r\n                >\r\n                    <Input style={{width: '150px'}} placeholder=\"如：8080\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"运行环境\"\r\n                    name=\"envId\"\r\n                    rules={[{required: true, message: '请选择环境!'}]}\r\n                >\r\n                    <RunEnvSelect onChange={setRunEnvId} style={{width: '200px'}} value={runEnvId}></RunEnvSelect>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"数据库用户名\"\r\n                    name=\"username\"\r\n                    rules={[{required: true, message: '请输入数据库用户名!'}]}\r\n                >\r\n                    <Input style={{width: '300px'}} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"数据库密码\"\r\n                    name=\"password\"\r\n                    rules={[{required: true, message: '请输入数据库密码!'}]}\r\n                >\r\n                    <Input style={{width: '300px'}} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"数据库类型\"\r\n                    name=\"type\"\r\n                    rules={[{required: true, message: '请选择数据库类型!'}]}\r\n                >\r\n                    <Select style={{ width: 120 }}>\r\n                        <Option value=\"1\">MySql</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    <div className=\"fixed-bottom\">\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={saving} style={{left: '70%'}}>\r\n                            保存\r\n                        </Button>\r\n                    </div>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    </div>);\r\n}\r\nexport {DbConfigEdit}\r\n","C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\testmanage\\dbconfig\\DbConfigList.tsx",[],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\components\\autotest\\planresult\\PlanResultPage.tsx",["332","333"],"C:\\Users\\zengb\\WebstormProjects\\usp\\usp-ciweb\\src\\utils\\RandomUtils.ts",[],{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","severity":1,"message":"339","line":2,"column":9,"nodeType":"340","messageId":"341","endLine":2,"endColumn":14},{"ruleId":"338","severity":1,"message":"342","line":2,"column":16,"nodeType":"340","messageId":"341","endLine":2,"endColumn":22},{"ruleId":"338","severity":1,"message":"343","line":2,"column":24,"nodeType":"340","messageId":"341","endLine":2,"endColumn":31},{"ruleId":"344","severity":1,"message":"345","line":39,"column":1,"nodeType":"346","endLine":41,"endColumn":2},{"ruleId":"338","severity":1,"message":"343","line":2,"column":24,"nodeType":"340","messageId":"341","endLine":2,"endColumn":31},{"ruleId":"338","severity":1,"message":"343","line":2,"column":24,"nodeType":"340","messageId":"341","endLine":2,"endColumn":31},{"ruleId":"338","severity":1,"message":"343","line":2,"column":24,"nodeType":"340","messageId":"341","endLine":2,"endColumn":31},{"ruleId":"338","severity":1,"message":"343","line":3,"column":17,"nodeType":"340","messageId":"341","endLine":3,"endColumn":24},{"ruleId":"338","severity":1,"message":"342","line":2,"column":59,"nodeType":"340","messageId":"341","endLine":2,"endColumn":65},{"ruleId":"338","severity":1,"message":"347","line":172,"column":15,"nodeType":"340","messageId":"341","endLine":172,"endColumn":20},{"ruleId":"348","severity":1,"message":"349","line":83,"column":8,"nodeType":"350","endLine":83,"endColumn":31,"suggestions":"351"},{"ruleId":"338","severity":1,"message":"352","line":4,"column":30,"nodeType":"340","messageId":"341","endLine":4,"endColumn":36},{"ruleId":"348","severity":1,"message":"353","line":81,"column":8,"nodeType":"350","endLine":81,"endColumn":12,"suggestions":"354"},{"ruleId":"338","severity":1,"message":"355","line":20,"column":9,"nodeType":"340","messageId":"341","endLine":20,"endColumn":23},{"ruleId":"338","severity":1,"message":"356","line":50,"column":7,"nodeType":"340","messageId":"341","endLine":50,"endColumn":17},{"ruleId":"338","severity":1,"message":"357","line":1,"column":16,"nodeType":"340","messageId":"341","endLine":1,"endColumn":24},{"ruleId":"338","severity":1,"message":"358","line":86,"column":11,"nodeType":"340","messageId":"341","endLine":86,"endColumn":22},{"ruleId":"338","severity":1,"message":"359","line":6,"column":5,"nodeType":"340","messageId":"341","endLine":6,"endColumn":19},{"ruleId":"338","severity":1,"message":"360","line":158,"column":9,"nodeType":"340","messageId":"341","endLine":158,"endColumn":16},{"ruleId":"348","severity":1,"message":"361","line":278,"column":8,"nodeType":"350","endLine":278,"endColumn":12,"suggestions":"362"},{"ruleId":"363","severity":1,"message":"364","line":429,"column":42,"nodeType":"365","messageId":"366","endLine":429,"endColumn":44},{"ruleId":"363","severity":1,"message":"364","line":435,"column":60,"nodeType":"365","messageId":"366","endLine":435,"endColumn":62},{"ruleId":"367","severity":1,"message":"368","line":631,"column":47,"nodeType":"369","messageId":"370","endLine":631,"endColumn":48},{"ruleId":"338","severity":1,"message":"371","line":9,"column":8,"nodeType":"340","messageId":"341","endLine":9,"endColumn":14},{"ruleId":"372","severity":1,"message":"373","line":40,"column":25,"nodeType":"374","messageId":"375","endLine":40,"endColumn":47},{"ruleId":"372","severity":1,"message":"373","line":46,"column":25,"nodeType":"374","messageId":"375","endLine":46,"endColumn":48},{"ruleId":"348","severity":1,"message":"353","line":31,"column":8,"nodeType":"350","endLine":31,"endColumn":12,"suggestions":"376"},{"ruleId":"338","severity":1,"message":"377","line":47,"column":23,"nodeType":"340","messageId":"341","endLine":47,"endColumn":35},{"ruleId":"348","severity":1,"message":"353","line":57,"column":8,"nodeType":"350","endLine":57,"endColumn":12,"suggestions":"378"},{"ruleId":"363","severity":1,"message":"379","line":114,"column":38,"nodeType":"365","messageId":"380","endLine":114,"endColumn":40},{"ruleId":"338","severity":1,"message":"343","line":2,"column":24,"nodeType":"340","messageId":"341","endLine":2,"endColumn":31},{"ruleId":"338","severity":1,"message":"343","line":2,"column":24,"nodeType":"340","messageId":"341","endLine":2,"endColumn":31},{"ruleId":"338","severity":1,"message":"371","line":10,"column":9,"nodeType":"340","messageId":"341","endLine":10,"endColumn":15},{"ruleId":"348","severity":1,"message":"381","line":53,"column":8,"nodeType":"350","endLine":53,"endColumn":57,"suggestions":"382"},{"ruleId":"348","severity":1,"message":"353","line":53,"column":8,"nodeType":"350","endLine":53,"endColumn":12,"suggestions":"383"},{"ruleId":"338","severity":1,"message":"384","line":5,"column":23,"nodeType":"340","messageId":"341","endLine":5,"endColumn":30},{"ruleId":"338","severity":1,"message":"385","line":2,"column":17,"nodeType":"340","messageId":"341","endLine":2,"endColumn":20},{"ruleId":"338","severity":1,"message":"386","line":2,"column":44,"nodeType":"340","messageId":"341","endLine":2,"endColumn":47},{"ruleId":"338","severity":1,"message":"387","line":3,"column":28,"nodeType":"340","messageId":"341","endLine":3,"endColumn":50},{"ruleId":"348","severity":1,"message":"353","line":30,"column":8,"nodeType":"350","endLine":30,"endColumn":12,"suggestions":"388"},{"ruleId":"338","severity":1,"message":"385","line":2,"column":17,"nodeType":"340","messageId":"341","endLine":2,"endColumn":20},{"ruleId":"338","severity":1,"message":"386","line":2,"column":44,"nodeType":"340","messageId":"341","endLine":2,"endColumn":47},{"ruleId":"338","severity":1,"message":"387","line":3,"column":28,"nodeType":"340","messageId":"341","endLine":3,"endColumn":50},{"ruleId":"348","severity":1,"message":"353","line":32,"column":8,"nodeType":"350","endLine":32,"endColumn":12,"suggestions":"389"},{"ruleId":"338","severity":1,"message":"390","line":9,"column":11,"nodeType":"340","messageId":"341","endLine":9,"endColumn":23},{"ruleId":"338","severity":1,"message":"391","line":10,"column":11,"nodeType":"340","messageId":"341","endLine":10,"endColumn":19},"no-native-reassign",["392"],"no-negated-in-lhs",["393"],"@typescript-eslint/no-unused-vars","'Table' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Tooltip' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'route' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadDataList'. Either include it or remove the dependency array.","ArrayExpression",["394"],"'Select' is defined but never used.","React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.",["395"],"'HttpApiPreview' is defined but never used.","'tailLayout' is assigned a value but never used.","'useState' is defined but never used.","'jsonColumns' is assigned a value but never used.","'ChromeOutlined' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'load' and 'loadPlatformApiTree'. Either include them or remove the dependency array.",["396"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Option' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression",["397"],"'setProjectId' is assigned a value but never used.",["398"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'onSearch'. Either include it or remove the dependency array.",["399"],["400"],"'BaseUrl' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'QuestionCircleOutlined' is defined but never used.",["401"],["402"],"'planOrCaseId' is assigned a value but never used.","'fromType' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"405","fix":"409"},{"desc":"405","fix":"410"},{"desc":"411","fix":"412"},{"desc":"405","fix":"413"},{"desc":"405","fix":"414"},{"desc":"405","fix":"415"},"Update the dependencies array to be: [projectId, dataTypeId, loadDataList]",{"range":"416","text":"417"},"Update the dependencies array to be: [id, load]",{"range":"418","text":"419"},"Update the dependencies array to be: [id, load, loadPlatformApiTree]",{"range":"420","text":"421"},{"range":"422","text":"419"},{"range":"423","text":"419"},"Update the dependencies array to be: [planId, pagination.pageSize, pagination.pageNum, onSearch]",{"range":"424","text":"425"},{"range":"426","text":"419"},{"range":"427","text":"419"},{"range":"428","text":"419"},[2973,2996],"[projectId, dataTypeId, loadDataList]",[2494,2498],"[id, load]",[9540,9544],"[id, load, loadPlatformApiTree]",[1552,1556],[1809,1813],[1906,1955],"[planId, pagination.pageSize, pagination.pageNum, onSearch]",[1837,1841],[952,956],[992,996]]